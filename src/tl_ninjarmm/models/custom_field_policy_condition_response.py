# coding: utf-8

"""
    NinjaOne Public API 2.0

    Ninja One Public API documentation. <br><br> See also: <br>  <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Device+Filter+Syntax.pdf\">Device Filter syntax</a><br> <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Webhooks.pdf\">Webhooks</a>

    The version of the OpenAPI document: 2.0.9-draft
    Contact: api@ninjarmm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from tl_ninjarmm.models.get_custom_fields_policy_conditions_default_response_inner_inheritance import GetCustomFieldsPolicyConditionsDefaultResponseInnerInheritance
from tl_ninjarmm.models.get_custom_fields_policy_conditions_default_response_inner_match_all_inner import GetCustomFieldsPolicyConditionsDefaultResponseInnerMatchAllInner
from tl_ninjarmm.models.get_custom_fields_policy_conditions_default_response_inner_scripts_inner import GetCustomFieldsPolicyConditionsDefaultResponseInnerScriptsInner
from typing import Optional, Set
from typing_extensions import Self

class CustomFieldPolicyConditionResponse(BaseModel):
    """
    Custom fields policy condition response payload
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Policy condition id")
    condition_name: Optional[StrictStr] = Field(default=None, description="Policy condition name", alias="conditionName")
    display_name: Optional[StrictStr] = Field(default=None, description="Policy condition display name", alias="displayName")
    enabled: Optional[StrictBool] = Field(default=None, description="Policy condition enabled")
    severity: Optional[StrictStr] = Field(default=None, description="Policy condition severity")
    priority: Optional[StrictStr] = Field(default=None, description="Policy condition priority")
    channels: Optional[List[StrictInt]] = Field(default=None, description="Policy condition notification channels")
    scripts: Optional[List[GetCustomFieldsPolicyConditionsDefaultResponseInnerScriptsInner]] = Field(default=None, description="Policy condition scripts")
    notification_action: Optional[StrictStr] = Field(default=None, description="Policy condition notification action", alias="notificationAction")
    notify_on_reset: Optional[StrictBool] = Field(default=None, description="Policy condition notify on reset", alias="notifyOnReset")
    reset_threshold: Optional[StrictInt] = Field(default=None, description="Policy condition reset threshold (seconds)", alias="resetThreshold")
    inheritance: Optional[GetCustomFieldsPolicyConditionsDefaultResponseInnerInheritance] = None
    match_all: Optional[List[GetCustomFieldsPolicyConditionsDefaultResponseInnerMatchAllInner]] = Field(default=None, description="Custom field value must meet all conditions", alias="matchAll")
    match_any: Optional[List[GetCustomFieldsPolicyConditionsDefaultResponseInnerMatchAllInner]] = Field(default=None, description="Custom field value must meet any conditions", alias="matchAny")
    __properties: ClassVar[List[str]] = ["id", "conditionName", "displayName", "enabled", "severity", "priority", "channels", "scripts", "notificationAction", "notifyOnReset", "resetThreshold", "inheritance", "matchAll", "matchAny"]

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE', 'MINOR', 'MODERATE', 'MAJOR', 'CRITICAL']):
            raise ValueError("must be one of enum values ('NONE', 'MINOR', 'MODERATE', 'MAJOR', 'CRITICAL')")
        return value

    @field_validator('priority')
    def priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE', 'LOW', 'MEDIUM', 'HIGH']):
            raise ValueError("must be one of enum values ('NONE', 'LOW', 'MEDIUM', 'HIGH')")
        return value

    @field_validator('notification_action')
    def notification_action_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE', 'SEND']):
            raise ValueError("must be one of enum values ('NONE', 'SEND')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomFieldPolicyConditionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in scripts (list)
        _items = []
        if self.scripts:
            for _item_scripts in self.scripts:
                if _item_scripts:
                    _items.append(_item_scripts.to_dict())
            _dict['scripts'] = _items
        # override the default output from pydantic by calling `to_dict()` of inheritance
        if self.inheritance:
            _dict['inheritance'] = self.inheritance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in match_all (list)
        _items = []
        if self.match_all:
            for _item_match_all in self.match_all:
                if _item_match_all:
                    _items.append(_item_match_all.to_dict())
            _dict['matchAll'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in match_any (list)
        _items = []
        if self.match_any:
            for _item_match_any in self.match_any:
                if _item_match_any:
                    _items.append(_item_match_any.to_dict())
            _dict['matchAny'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomFieldPolicyConditionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "conditionName": obj.get("conditionName"),
            "displayName": obj.get("displayName"),
            "enabled": obj.get("enabled"),
            "severity": obj.get("severity"),
            "priority": obj.get("priority"),
            "channels": obj.get("channels"),
            "scripts": [GetCustomFieldsPolicyConditionsDefaultResponseInnerScriptsInner.from_dict(_item) for _item in obj["scripts"]] if obj.get("scripts") is not None else None,
            "notificationAction": obj.get("notificationAction"),
            "notifyOnReset": obj.get("notifyOnReset"),
            "resetThreshold": obj.get("resetThreshold"),
            "inheritance": GetCustomFieldsPolicyConditionsDefaultResponseInnerInheritance.from_dict(obj["inheritance"]) if obj.get("inheritance") is not None else None,
            "matchAll": [GetCustomFieldsPolicyConditionsDefaultResponseInnerMatchAllInner.from_dict(_item) for _item in obj["matchAll"]] if obj.get("matchAll") is not None else None,
            "matchAny": [GetCustomFieldsPolicyConditionsDefaultResponseInnerMatchAllInner.from_dict(_item) for _item in obj["matchAny"]] if obj.get("matchAny") is not None else None
        })
        return _obj


