# coding: utf-8

"""
NinjaOne Public API 2.0

NinjaOne Public API documentation.

The version of the OpenAPI document: 2.0.9-draft
Contact: api@ninjarmm.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self


class VolumeBitLockerStatus(BaseModel):
    """
    BitLocker Status
    """  # noqa: E501

    conversion_status: Optional[StrictStr] = Field(
        default=None,
        description="Volume encryption or decryption status.",
        alias="conversionStatus",
    )
    encryption_method: Optional[StrictStr] = Field(
        default=None,
        description="Indicated the encryption algorithm and key size used on the volume",
        alias="encryptionMethod",
    )
    protection_status: Optional[StrictStr] = Field(
        default=None,
        description=" indicates whether the volume and its encryption key (if any) are secured.",
        alias="protectionStatus",
    )
    lock_status: Optional[StrictStr] = Field(
        default=None,
        description="Indicates whether the contents of the volume are accessible from Windows",
        alias="lockStatus",
    )
    initialized_for_protection: Optional[StrictBool] = Field(
        default=None,
        description="Is initialized for protection",
        alias="initializedForProtection",
    )
    __properties: ClassVar[List[str]] = [
        "conversionStatus",
        "encryptionMethod",
        "protectionStatus",
        "lockStatus",
        "initializedForProtection",
    ]

    @field_validator("conversion_status")
    def conversion_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "FULLY_DECRYPTED",
                "FULLY_ENCRYPTED",
                "ENCRYPTION_IN_PROGRESS",
                "DECRYPTION_IN_PROGRESS",
                "ENCRYPTION_PAUSED",
                "DECRYPTION_PAUSED",
                "UNKNOWN",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('FULLY_DECRYPTED', 'FULLY_ENCRYPTED', 'ENCRYPTION_IN_PROGRESS', 'DECRYPTION_IN_PROGRESS', 'ENCRYPTION_PAUSED', 'DECRYPTION_PAUSED', 'UNKNOWN')"
            )
        return value

    @field_validator("encryption_method")
    def encryption_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "NONE",
                "AES_128_WITH_DIFFUSER",
                "AES_256_WITH_DIFFUSER",
                "AES_128",
                "AES_256",
                "HARDWARE_ENCRYPTION",
                "XTS_AES_128",
                "XTS_AES_256",
                "UNKNOWN",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('NONE', 'AES_128_WITH_DIFFUSER', 'AES_256_WITH_DIFFUSER', 'AES_128', 'AES_256', 'HARDWARE_ENCRYPTION', 'XTS_AES_128', 'XTS_AES_256', 'UNKNOWN')"
            )
        return value

    @field_validator("protection_status")
    def protection_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["UNPROTECTED", "PROTECTED", "UNKNOWN", "PENDING"]):
            raise ValueError(
                "must be one of enum values ('UNPROTECTED', 'PROTECTED', 'UNKNOWN', 'PENDING')"
            )
        return value

    @field_validator("lock_status")
    def lock_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["UNKNOWN", "UNLOCKED", "LOCKED"]):
            raise ValueError(
                "must be one of enum values ('UNKNOWN', 'UNLOCKED', 'LOCKED')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VolumeBitLockerStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VolumeBitLockerStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "conversionStatus": obj.get("conversionStatus"),
                "encryptionMethod": obj.get("encryptionMethod"),
                "protectionStatus": obj.get("protectionStatus"),
                "lockStatus": obj.get("lockStatus"),
                "initializedForProtection": obj.get("initializedForProtection"),
            }
        )
        return _obj
