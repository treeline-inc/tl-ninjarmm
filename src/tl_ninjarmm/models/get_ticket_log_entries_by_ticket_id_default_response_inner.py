# coding: utf-8

"""
    NinjaOne Public API 2.0

    Ninja One Public API documentation. <br><br> See also: <br>  <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Device+Filter+Syntax.pdf\">Device Filter syntax</a><br> <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Webhooks.pdf\">Webhooks</a>

    The version of the OpenAPI document: 2.0.9-draft
    Contact: api@ninjarmm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from tl_ninjarmm.models.get_ticket_log_entries_by_ticket_id_default_response_inner_automation import GetTicketLogEntriesByTicketIdDefaultResponseInnerAutomation
from tl_ninjarmm.models.get_ticket_log_entries_by_ticket_id_default_response_inner_technicians_tagged_metadata_inner import GetTicketLogEntriesByTicketIdDefaultResponseInnerTechniciansTaggedMetadataInner
from tl_ninjarmm.models.get_ticket_log_entries_by_ticket_id_default_response_inner_ticket_time_entry import GetTicketLogEntriesByTicketIdDefaultResponseInnerTicketTimeEntry
from typing import Optional, Set
from typing_extensions import Self

class GetTicketLogEntriesByTicketIdDefaultResponseInner(BaseModel):
    """
    GetTicketLogEntriesByTicketIdDefaultResponseInner
    """ # noqa: E501
    id: Optional[StrictInt] = None
    app_user_contact_uid: Optional[StrictStr] = Field(default=None, alias="appUserContactUid")
    app_user_contact_id: Optional[StrictInt] = Field(default=None, alias="appUserContactId")
    app_user_contact_type: Optional[StrictStr] = Field(default=None, alias="appUserContactType")
    type: Optional[StrictStr] = None
    body: Optional[StrictStr] = None
    html_body: Optional[StrictStr] = Field(default=None, alias="htmlBody")
    full_email_body: Optional[StrictStr] = Field(default=None, alias="fullEmailBody")
    public_entry: Optional[StrictBool] = Field(default=None, alias="publicEntry")
    system: Optional[StrictBool] = None
    create_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="createTime")
    change_diff: Optional[Dict[str, Any]] = Field(default=None, alias="changeDiff")
    activity_id: Optional[StrictInt] = Field(default=None, alias="activityId")
    time_tracked: Optional[StrictInt] = Field(default=None, alias="timeTracked")
    technician_tagged: Optional[List[StrictInt]] = Field(default=None, alias="technicianTagged")
    technicians_tagged_metadata: Optional[List[GetTicketLogEntriesByTicketIdDefaultResponseInnerTechniciansTaggedMetadataInner]] = Field(default=None, alias="techniciansTaggedMetadata")
    automation: Optional[GetTicketLogEntriesByTicketIdDefaultResponseInnerAutomation] = None
    blocked_by_invoice: Optional[StrictBool] = Field(default=None, alias="blockedByInvoice")
    ticket_time_entry: Optional[GetTicketLogEntriesByTicketIdDefaultResponseInnerTicketTimeEntry] = Field(default=None, alias="ticketTimeEntry")
    email_response: Optional[StrictBool] = Field(default=None, alias="emailResponse")
    __properties: ClassVar[List[str]] = ["id", "appUserContactUid", "appUserContactId", "appUserContactType", "type", "body", "htmlBody", "fullEmailBody", "publicEntry", "system", "createTime", "changeDiff", "activityId", "timeTracked", "technicianTagged", "techniciansTaggedMetadata", "automation", "blockedByInvoice", "ticketTimeEntry", "emailResponse"]

    @field_validator('app_user_contact_type')
    def app_user_contact_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TECHNICIAN', 'END_USER', 'CONTACT']):
            raise ValueError("must be one of enum values ('TECHNICIAN', 'END_USER', 'CONTACT')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DESCRIPTION', 'COMMENT', 'CONDITION', 'SAVE', 'DELETE', 'PRODUCT']):
            raise ValueError("must be one of enum values ('DESCRIPTION', 'COMMENT', 'CONDITION', 'SAVE', 'DELETE', 'PRODUCT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetTicketLogEntriesByTicketIdDefaultResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in technicians_tagged_metadata (list)
        _items = []
        if self.technicians_tagged_metadata:
            for _item_technicians_tagged_metadata in self.technicians_tagged_metadata:
                if _item_technicians_tagged_metadata:
                    _items.append(_item_technicians_tagged_metadata.to_dict())
            _dict['techniciansTaggedMetadata'] = _items
        # override the default output from pydantic by calling `to_dict()` of automation
        if self.automation:
            _dict['automation'] = self.automation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ticket_time_entry
        if self.ticket_time_entry:
            _dict['ticketTimeEntry'] = self.ticket_time_entry.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetTicketLogEntriesByTicketIdDefaultResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "appUserContactUid": obj.get("appUserContactUid"),
            "appUserContactId": obj.get("appUserContactId"),
            "appUserContactType": obj.get("appUserContactType"),
            "type": obj.get("type"),
            "body": obj.get("body"),
            "htmlBody": obj.get("htmlBody"),
            "fullEmailBody": obj.get("fullEmailBody"),
            "publicEntry": obj.get("publicEntry"),
            "system": obj.get("system"),
            "createTime": obj.get("createTime"),
            "changeDiff": obj.get("changeDiff"),
            "activityId": obj.get("activityId"),
            "timeTracked": obj.get("timeTracked"),
            "technicianTagged": obj.get("technicianTagged"),
            "techniciansTaggedMetadata": [GetTicketLogEntriesByTicketIdDefaultResponseInnerTechniciansTaggedMetadataInner.from_dict(_item) for _item in obj["techniciansTaggedMetadata"]] if obj.get("techniciansTaggedMetadata") is not None else None,
            "automation": GetTicketLogEntriesByTicketIdDefaultResponseInnerAutomation.from_dict(obj["automation"]) if obj.get("automation") is not None else None,
            "blockedByInvoice": obj.get("blockedByInvoice"),
            "ticketTimeEntry": GetTicketLogEntriesByTicketIdDefaultResponseInnerTicketTimeEntry.from_dict(obj["ticketTimeEntry"]) if obj.get("ticketTimeEntry") is not None else None,
            "emailResponse": obj.get("emailResponse")
        })
        return _obj


