# coding: utf-8

"""
    NinjaOne Public API 2.0

    Ninja One Public API documentation. <br><br> See also: <br>  <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Device+Filter+Syntax.pdf\">Device Filter syntax</a><br> <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Webhooks.pdf\">Webhooks</a>

    The version of the OpenAPI document: 2.0.9-draft
    Contact: api@ninjarmm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from tl_ninjarmm.models.get_device200_response_maintenance import GetDevice200ResponseMaintenance
from tl_ninjarmm.models.get_device200_response_notes_inner import GetDevice200ResponseNotesInner
from tl_ninjarmm.models.get_device200_response_references import GetDevice200ResponseReferences
from typing import Optional, Set
from typing_extensions import Self

class NMSTarget(BaseModel):
    """
    NMSTarget
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Node (Device) identifier")
    parent_device_id: Optional[StrictInt] = Field(default=None, description="Parent Node identifier", alias="parentDeviceId")
    organization_id: Optional[StrictInt] = Field(default=None, description="Organization identifier", alias="organizationId")
    location_id: Optional[StrictInt] = Field(default=None, description="Location identifier", alias="locationId")
    node_class: Optional[StrictStr] = Field(default=None, description="Node Class", alias="nodeClass")
    node_role_id: Optional[StrictInt] = Field(default=None, description="Node Role identifier", alias="nodeRoleId")
    role_policy_id: Optional[StrictInt] = Field(default=None, description="Node Role policy ID based on organization and location Policy Mapping", alias="rolePolicyId")
    policy_id: Optional[StrictInt] = Field(default=None, description="Assigned policy ID (overrides organization and location policy mapping)", alias="policyId")
    approval_status: Optional[StrictStr] = Field(default=None, description="Approval Status", alias="approvalStatus")
    offline: Optional[StrictBool] = Field(default=None, description="Is Offline?")
    display_name: Optional[StrictStr] = Field(default=None, description="Display Name", alias="displayName")
    system_name: Optional[StrictStr] = Field(default=None, description="System Name", alias="systemName")
    dns_name: Optional[StrictStr] = Field(default=None, description="DNS Name", alias="dnsName")
    netbios_name: Optional[StrictStr] = Field(default=None, description="NETBIOS Name", alias="netbiosName")
    created: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Created")
    last_contact: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Last Contact", alias="lastContact")
    last_update: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Last data submission timestamp", alias="lastUpdate")
    user_data: Optional[Dict[str, Any]] = Field(default=None, description="Custom attributes", alias="userData")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Tags")
    fields: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="Custom Fields")
    maintenance: Optional[GetDevice200ResponseMaintenance] = None
    references: Optional[GetDevice200ResponseReferences] = None
    ip_addresses: Optional[List[StrictStr]] = Field(default=None, description="Device IP addresses", alias="ipAddresses")
    mac_addresses: Optional[List[StrictStr]] = Field(default=None, description="Device MAC addresses", alias="macAddresses")
    public_ip: Optional[StrictStr] = Field(default=None, description="Device Public IP Address", alias="publicIP")
    notes: Optional[List[GetDevice200ResponseNotesInner]] = Field(default=None, description="Device Notes")
    device_type: Optional[StrictStr] = Field(default=None, alias="deviceType")
    __properties: ClassVar[List[str]] = ["id", "parentDeviceId", "organizationId", "locationId", "nodeClass", "nodeRoleId", "rolePolicyId", "policyId", "approvalStatus", "offline", "displayName", "systemName", "dnsName", "netbiosName", "created", "lastContact", "lastUpdate", "userData", "tags", "fields", "maintenance", "references", "ipAddresses", "macAddresses", "publicIP", "notes", "deviceType"]

    @field_validator('node_class')
    def node_class_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WINDOWS_SERVER', 'WINDOWS_WORKSTATION', 'LINUX_WORKSTATION', 'MAC', 'ANDROID', 'APPLE_IOS', 'APPLE_IPADOS', 'VMWARE_VM_HOST', 'VMWARE_VM_GUEST', 'HYPERV_VMM_HOST', 'HYPERV_VMM_GUEST', 'LINUX_SERVER', 'MAC_SERVER', 'CLOUD_MONITOR_TARGET', 'NMS_SWITCH', 'NMS_ROUTER', 'NMS_FIREWALL', 'NMS_PRIVATE_NETWORK_GATEWAY', 'NMS_PRINTER', 'NMS_SCANNER', 'NMS_DIAL_MANAGER', 'NMS_WAP', 'NMS_IPSLA', 'NMS_COMPUTER', 'NMS_VM_HOST', 'NMS_APPLIANCE', 'NMS_OTHER', 'NMS_SERVER', 'NMS_PHONE', 'NMS_VIRTUAL_MACHINE', 'NMS_NETWORK_MANAGEMENT_AGENT']):
            raise ValueError("must be one of enum values ('WINDOWS_SERVER', 'WINDOWS_WORKSTATION', 'LINUX_WORKSTATION', 'MAC', 'ANDROID', 'APPLE_IOS', 'APPLE_IPADOS', 'VMWARE_VM_HOST', 'VMWARE_VM_GUEST', 'HYPERV_VMM_HOST', 'HYPERV_VMM_GUEST', 'LINUX_SERVER', 'MAC_SERVER', 'CLOUD_MONITOR_TARGET', 'NMS_SWITCH', 'NMS_ROUTER', 'NMS_FIREWALL', 'NMS_PRIVATE_NETWORK_GATEWAY', 'NMS_PRINTER', 'NMS_SCANNER', 'NMS_DIAL_MANAGER', 'NMS_WAP', 'NMS_IPSLA', 'NMS_COMPUTER', 'NMS_VM_HOST', 'NMS_APPLIANCE', 'NMS_OTHER', 'NMS_SERVER', 'NMS_PHONE', 'NMS_VIRTUAL_MACHINE', 'NMS_NETWORK_MANAGEMENT_AGENT')")
        return value

    @field_validator('approval_status')
    def approval_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PENDING', 'APPROVED']):
            raise ValueError("must be one of enum values ('PENDING', 'APPROVED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NMSTarget from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of maintenance
        if self.maintenance:
            _dict['maintenance'] = self.maintenance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of references
        if self.references:
            _dict['references'] = self.references.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in notes (list)
        _items = []
        if self.notes:
            for _item_notes in self.notes:
                if _item_notes:
                    _items.append(_item_notes.to_dict())
            _dict['notes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NMSTarget from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "parentDeviceId": obj.get("parentDeviceId"),
            "organizationId": obj.get("organizationId"),
            "locationId": obj.get("locationId"),
            "nodeClass": obj.get("nodeClass"),
            "nodeRoleId": obj.get("nodeRoleId"),
            "rolePolicyId": obj.get("rolePolicyId"),
            "policyId": obj.get("policyId"),
            "approvalStatus": obj.get("approvalStatus"),
            "offline": obj.get("offline"),
            "displayName": obj.get("displayName"),
            "systemName": obj.get("systemName"),
            "dnsName": obj.get("dnsName"),
            "netbiosName": obj.get("netbiosName"),
            "created": obj.get("created"),
            "lastContact": obj.get("lastContact"),
            "lastUpdate": obj.get("lastUpdate"),
            "userData": obj.get("userData"),
            "tags": obj.get("tags"),
            "fields": obj.get("fields"),
            "maintenance": GetDevice200ResponseMaintenance.from_dict(obj["maintenance"]) if obj.get("maintenance") is not None else None,
            "references": GetDevice200ResponseReferences.from_dict(obj["references"]) if obj.get("references") is not None else None,
            "ipAddresses": obj.get("ipAddresses"),
            "macAddresses": obj.get("macAddresses"),
            "publicIP": obj.get("publicIP"),
            "notes": [GetDevice200ResponseNotesInner.from_dict(_item) for _item in obj["notes"]] if obj.get("notes") is not None else None,
            "deviceType": obj.get("deviceType")
        })
        return _obj


