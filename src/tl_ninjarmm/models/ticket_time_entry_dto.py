# coding: utf-8

"""
    NinjaOne Public API 2.0

    Ninja One Public API documentation. <br><br> See also: <br>  <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Device+Filter+Syntax.pdf\">Device Filter syntax</a><br> <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Webhooks.pdf\">Webhooks</a>

    The version of the OpenAPI document: 2.0.9-draft
    Contact: api@ninjarmm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from tl_ninjarmm.models.get_ticket_log_entries_by_ticket_id_default_response_inner_ticket_time_entry_agreement import GetTicketLogEntriesByTicketIdDefaultResponseInnerTicketTimeEntryAgreement
from typing import Optional, Set
from typing_extensions import Self

class TicketTimeEntryDTO(BaseModel):
    """
    TicketTimeEntryDTO
    """ # noqa: E501
    ticket_log_entry_id: Optional[StrictInt] = Field(default=None, alias="ticketLogEntryId")
    invoice_id: Optional[StrictInt] = Field(default=None, alias="invoiceId")
    start_date: Optional[StrictInt] = Field(default=None, alias="startDate")
    remote: Optional[StrictBool] = None
    billing: Optional[StrictStr] = None
    billing_status: Optional[StrictStr] = Field(default=None, alias="billingStatus")
    agreement_origin_type: Optional[StrictStr] = Field(default=None, alias="agreementOriginType")
    price: Optional[Union[StrictFloat, StrictInt]] = None
    time_tracked: Optional[StrictInt] = Field(default=None, alias="timeTracked")
    agreement: Optional[GetTicketLogEntriesByTicketIdDefaultResponseInnerTicketTimeEntryAgreement] = None
    __properties: ClassVar[List[str]] = ["ticketLogEntryId", "invoiceId", "startDate", "remote", "billing", "billingStatus", "agreementOriginType", "price", "timeTracked", "agreement"]

    @field_validator('billing')
    def billing_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BILLABLE', 'NOT_BILLABLE', 'NO_CHARGE']):
            raise ValueError("must be one of enum values ('BILLABLE', 'NOT_BILLABLE', 'NO_CHARGE')")
        return value

    @field_validator('billing_status')
    def billing_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BILLED', 'PENDING', 'NOT_BILLABLE']):
            raise ValueError("must be one of enum values ('BILLED', 'PENDING', 'NOT_BILLABLE')")
        return value

    @field_validator('agreement_origin_type')
    def agreement_origin_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE', 'SELF', 'TICKET']):
            raise ValueError("must be one of enum values ('NONE', 'SELF', 'TICKET')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TicketTimeEntryDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of agreement
        if self.agreement:
            _dict['agreement'] = self.agreement.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TicketTimeEntryDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ticketLogEntryId": obj.get("ticketLogEntryId"),
            "invoiceId": obj.get("invoiceId"),
            "startDate": obj.get("startDate"),
            "remote": obj.get("remote"),
            "billing": obj.get("billing"),
            "billingStatus": obj.get("billingStatus"),
            "agreementOriginType": obj.get("agreementOriginType"),
            "price": obj.get("price"),
            "timeTracked": obj.get("timeTracked"),
            "agreement": GetTicketLogEntriesByTicketIdDefaultResponseInnerTicketTimeEntryAgreement.from_dict(obj["agreement"]) if obj.get("agreement") is not None else None
        })
        return _obj


