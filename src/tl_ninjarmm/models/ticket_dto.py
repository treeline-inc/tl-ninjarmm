# coding: utf-8

"""
    NinjaOne Public API 2.0

    Ninja One Public API documentation. <br><br> See also: <br>  <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Device+Filter+Syntax.pdf\">Device Filter syntax</a><br> <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Webhooks.pdf\">Webhooks</a>

    The version of the OpenAPI document: 2.0.9-draft
    Contact: api@ninjarmm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from tl_ninjarmm.models.create_default_response_attribute_values_inner import CreateDefaultResponseAttributeValuesInner
from tl_ninjarmm.models.create_default_response_cc_list import CreateDefaultResponseCcList
from tl_ninjarmm.models.create_default_response_status import CreateDefaultResponseStatus
from typing import Optional, Set
from typing_extensions import Self

class TicketDTO(BaseModel):
    """
    TicketDTO
    """ # noqa: E501
    id: Optional[StrictInt] = None
    version: Optional[StrictInt] = None
    node_id: Optional[StrictInt] = Field(default=None, alias="nodeId")
    client_id: Optional[StrictInt] = Field(default=None, alias="clientId")
    location_id: Optional[StrictInt] = Field(default=None, alias="locationId")
    assigned_app_user_id: Optional[StrictInt] = Field(default=None, alias="assignedAppUserId")
    requester_uid: Optional[StrictStr] = Field(default=None, alias="requesterUid")
    subject: Optional[StrictStr] = None
    status: Optional[CreateDefaultResponseStatus] = None
    type: Optional[StrictStr] = None
    priority: Optional[StrictStr] = None
    severity: Optional[StrictStr] = None
    ticket_form_id: Optional[StrictInt] = Field(default=None, alias="ticketFormId")
    source: Optional[StrictStr] = None
    tags: Optional[List[StrictStr]] = None
    cc_list: Optional[CreateDefaultResponseCcList] = Field(default=None, alias="ccList")
    create_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="createTime")
    deleted: Optional[StrictBool] = None
    attribute_values: Optional[List[CreateDefaultResponseAttributeValuesInner]] = Field(default=None, alias="attributeValues")
    __properties: ClassVar[List[str]] = ["id", "version", "nodeId", "clientId", "locationId", "assignedAppUserId", "requesterUid", "subject", "status", "type", "priority", "severity", "ticketFormId", "source", "tags", "ccList", "createTime", "deleted", "attributeValues"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROBLEM', 'QUESTION', 'INCIDENT', 'TASK']):
            raise ValueError("must be one of enum values ('PROBLEM', 'QUESTION', 'INCIDENT', 'TASK')")
        return value

    @field_validator('priority')
    def priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE', 'LOW', 'MEDIUM', 'HIGH']):
            raise ValueError("must be one of enum values ('NONE', 'LOW', 'MEDIUM', 'HIGH')")
        return value

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE', 'MINOR', 'MODERATE', 'MAJOR', 'CRITICAL']):
            raise ValueError("must be one of enum values ('NONE', 'MINOR', 'MODERATE', 'MAJOR', 'CRITICAL')")
        return value

    @field_validator('source')
    def source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TECHNICIAN', 'EMAIL', 'WEB_FORM', 'HELP_REQUEST', 'END_USER', 'CONDITION', 'SCHEDULED_SCRIPT', 'ACTIVITY']):
            raise ValueError("must be one of enum values ('TECHNICIAN', 'EMAIL', 'WEB_FORM', 'HELP_REQUEST', 'END_USER', 'CONDITION', 'SCHEDULED_SCRIPT', 'ACTIVITY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TicketDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cc_list
        if self.cc_list:
            _dict['ccList'] = self.cc_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in attribute_values (list)
        _items = []
        if self.attribute_values:
            for _item_attribute_values in self.attribute_values:
                if _item_attribute_values:
                    _items.append(_item_attribute_values.to_dict())
            _dict['attributeValues'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TicketDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "version": obj.get("version"),
            "nodeId": obj.get("nodeId"),
            "clientId": obj.get("clientId"),
            "locationId": obj.get("locationId"),
            "assignedAppUserId": obj.get("assignedAppUserId"),
            "requesterUid": obj.get("requesterUid"),
            "subject": obj.get("subject"),
            "status": CreateDefaultResponseStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "type": obj.get("type"),
            "priority": obj.get("priority"),
            "severity": obj.get("severity"),
            "ticketFormId": obj.get("ticketFormId"),
            "source": obj.get("source"),
            "tags": obj.get("tags"),
            "ccList": CreateDefaultResponseCcList.from_dict(obj["ccList"]) if obj.get("ccList") is not None else None,
            "createTime": obj.get("createTime"),
            "deleted": obj.get("deleted"),
            "attributeValues": [CreateDefaultResponseAttributeValuesInner.from_dict(_item) for _item in obj["attributeValues"]] if obj.get("attributeValues") is not None else None
        })
        return _obj


