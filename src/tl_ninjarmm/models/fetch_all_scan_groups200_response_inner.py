# coding: utf-8

"""
    NinjaOne Public API 2.0

    Ninja One Public API documentation. <br><br> See also: <br>  <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Device+Filter+Syntax.pdf\">Device Filter syntax</a><br> <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Webhooks.pdf\">Webhooks</a>

    The version of the OpenAPI document: 2.0.9-draft
    Contact: api@ninjarmm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FetchAllScanGroups200ResponseInner(BaseModel):
    """
    FetchAllScanGroups200ResponseInner
    """ # noqa: E501
    id: Optional[StrictInt] = None
    group_name: Optional[StrictStr] = Field(default=None, alias="groupName")
    file_name: Optional[StrictStr] = Field(default=None, alias="fileName")
    status: Optional[StrictStr] = None
    vendor: Optional[StrictStr] = None
    third_party_api_tile: Optional[StrictStr] = Field(default=None, alias="thirdPartyApiTile")
    device_id_header: Optional[StrictStr] = Field(default=None, alias="deviceIdHeader")
    device_internal_mapping: Optional[StrictStr] = Field(default=None, alias="deviceInternalMapping")
    cve_id_header: Optional[StrictStr] = Field(default=None, alias="cveIdHeader")
    last_file_upload_date: Optional[StrictStr] = Field(default=None, alias="lastFileUploadDate")
    records_processed: Optional[StrictInt] = Field(default=None, alias="recordsProcessed")
    __properties: ClassVar[List[str]] = ["id", "groupName", "fileName", "status", "vendor", "thirdPartyApiTile", "deviceIdHeader", "deviceInternalMapping", "cveIdHeader", "lastFileUploadDate", "recordsProcessed"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMPLETE', 'IN_PROGRESS', 'FAILED']):
            raise ValueError("must be one of enum values ('COMPLETE', 'IN_PROGRESS', 'FAILED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FetchAllScanGroups200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FetchAllScanGroups200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "groupName": obj.get("groupName"),
            "fileName": obj.get("fileName"),
            "status": obj.get("status"),
            "vendor": obj.get("vendor"),
            "thirdPartyApiTile": obj.get("thirdPartyApiTile"),
            "deviceIdHeader": obj.get("deviceIdHeader"),
            "deviceInternalMapping": obj.get("deviceInternalMapping"),
            "cveIdHeader": obj.get("cveIdHeader"),
            "lastFileUploadDate": obj.get("lastFileUploadDate"),
            "recordsProcessed": obj.get("recordsProcessed")
        })
        return _obj


