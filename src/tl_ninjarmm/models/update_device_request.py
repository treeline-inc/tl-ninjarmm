# coding: utf-8

"""
    NinjaOne Public API 2.0

    Ninja One Public API documentation. <br><br> See also: <br>  <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Device+Filter+Syntax.pdf\">Device Filter syntax</a><br> <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Webhooks.pdf\">Webhooks</a>

    The version of the OpenAPI document: 2.0.9-draft
    Contact: api@ninjarmm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from tl_ninjarmm.models.get_device200_response_references_warranty import GetDevice200ResponseReferencesWarranty
from typing import Optional, Set
from typing_extensions import Self

class UpdateDeviceRequest(BaseModel):
    """
    UpdateDeviceRequest
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="Display name (User assigned)", alias="displayName")
    user_data: Optional[Dict[str, Any]] = Field(default=None, description="Custom attributes", alias="userData")
    node_role_id: Optional[StrictInt] = Field(default=None, description="Node Role identifier", alias="nodeRoleId")
    policy_id: Optional[StrictInt] = Field(default=None, description="Assigned policy ID (overrides organization policy mapping, or reverts to organization policy if Null)", alias="policyId")
    organization_id: Optional[StrictInt] = Field(default=None, description="Organization identifier", alias="organizationId")
    location_id: Optional[StrictInt] = Field(default=None, description="Location identifier", alias="locationId")
    warranty: Optional[GetDevice200ResponseReferencesWarranty] = None
    __properties: ClassVar[List[str]] = ["displayName", "userData", "nodeRoleId", "policyId", "organizationId", "locationId", "warranty"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateDeviceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of warranty
        if self.warranty:
            _dict['warranty'] = self.warranty.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateDeviceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "userData": obj.get("userData"),
            "nodeRoleId": obj.get("nodeRoleId"),
            "policyId": obj.get("policyId"),
            "organizationId": obj.get("organizationId"),
            "locationId": obj.get("locationId"),
            "warranty": GetDevice200ResponseReferencesWarranty.from_dict(obj["warranty"]) if obj.get("warranty") is not None else None
        })
        return _obj


