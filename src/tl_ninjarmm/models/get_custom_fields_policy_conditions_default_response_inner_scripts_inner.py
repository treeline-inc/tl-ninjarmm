# coding: utf-8

"""
    NinjaOne Public API 2.0

    Ninja One Public API documentation. <br><br> See also: <br>  <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Device+Filter+Syntax.pdf\">Device Filter syntax</a><br> <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Webhooks.pdf\">Webhooks</a>

    The version of the OpenAPI document: 2.0.9-draft
    Contact: api@ninjarmm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from tl_ninjarmm.models.get_custom_fields_policy_conditions_default_response_inner_scripts_inner_script_variables_inner import GetCustomFieldsPolicyConditionsDefaultResponseInnerScriptsInnerScriptVariablesInner
from typing import Optional, Set
from typing_extensions import Self

class GetCustomFieldsPolicyConditionsDefaultResponseInnerScriptsInner(BaseModel):
    """
    Policy condition script
    """ # noqa: E501
    script_id: Optional[StrictInt] = Field(default=None, description="Policy condition script id", alias="scriptId")
    run_as: Optional[StrictStr] = Field(default='SYSTEM', description="Policy condition script runAs", alias="runAs")
    script_param: Optional[StrictStr] = Field(default=None, description="Policy condition script parameter", alias="scriptParam")
    script_variables: Optional[Annotated[List[GetCustomFieldsPolicyConditionsDefaultResponseInnerScriptsInnerScriptVariablesInner], Field(min_length=0, max_length=20)]] = Field(default=None, description="Policy condition script variables", alias="scriptVariables")
    __properties: ClassVar[List[str]] = ["scriptId", "runAs", "scriptParam", "scriptVariables"]

    @field_validator('run_as')
    def run_as_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SYSTEM', 'LOGGED_ON_USER', 'LOCAL_ADMIN', 'DOMAIN_ADMIN', 'PREFERRED_CREDENTIAL_MAC', 'PREFERRED_CREDENTIAL_LINUX']):
            raise ValueError("must be one of enum values ('SYSTEM', 'LOGGED_ON_USER', 'LOCAL_ADMIN', 'DOMAIN_ADMIN', 'PREFERRED_CREDENTIAL_MAC', 'PREFERRED_CREDENTIAL_LINUX')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetCustomFieldsPolicyConditionsDefaultResponseInnerScriptsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in script_variables (list)
        _items = []
        if self.script_variables:
            for _item_script_variables in self.script_variables:
                if _item_script_variables:
                    _items.append(_item_script_variables.to_dict())
            _dict['scriptVariables'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetCustomFieldsPolicyConditionsDefaultResponseInnerScriptsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "scriptId": obj.get("scriptId"),
            "runAs": obj.get("runAs") if obj.get("runAs") is not None else 'SYSTEM',
            "scriptParam": obj.get("scriptParam"),
            "scriptVariables": [GetCustomFieldsPolicyConditionsDefaultResponseInnerScriptsInnerScriptVariablesInner.from_dict(_item) for _item in obj["scriptVariables"]] if obj.get("scriptVariables") is not None else None
        })
        return _obj


