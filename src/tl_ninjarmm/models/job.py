# coding: utf-8

"""
NinjaOne Public API 2.0

NinjaOne Public API documentation.

The version of the OpenAPI document: 2.0.9-draft
Contact: api@ninjarmm.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional, Union
from tl_ninjarmm.models.node_with_detailed_references import NodeWithDetailedReferences
from typing import Set
from typing_extensions import Self


class Job(BaseModel):
    """
    Job
    """  # noqa: E501

    uid: Optional[StrictStr] = Field(
        default=None, description="Task/Job UID (activity series UID)"
    )
    device_id: Optional[StrictInt] = Field(
        default=None, description="Device identifier", alias="deviceId"
    )
    message: Optional[StrictStr] = Field(default=None, description="Job message")
    create_time: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Job start timestamp", alias="createTime"
    )
    update_time: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Job last updated", alias="updateTime"
    )
    source_type: Optional[StrictStr] = Field(
        default=None, description="Job origin", alias="sourceType"
    )
    source_config_uid: Optional[StrictStr] = Field(
        default=None,
        description="Source configuration/policy element reference",
        alias="sourceConfigUid",
    )
    source_name: Optional[StrictStr] = Field(
        default=None,
        description="Source configuration/policy element name",
        alias="sourceName",
    )
    subject: Optional[StrictStr] = Field(default=None, description="Job subject")
    user_id: Optional[StrictInt] = Field(
        default=None, description="User identifier", alias="userId"
    )
    psa_ticket_id: Optional[Dict[str, Any]] = Field(
        default=None, description="Related PSA ticket ID", alias="psaTicketId"
    )
    ticket_template_id: Optional[StrictInt] = Field(
        default=None, description="PSA ticket template", alias="ticketTemplateId"
    )
    data: Optional[Dict[str, Any]] = Field(default=None, description="Job data")
    device: Optional[NodeWithDetailedReferences] = None
    job_status: Optional[StrictStr] = Field(
        default=None, description="Job Status", alias="jobStatus"
    )
    job_result: Optional[StrictStr] = Field(
        default=None, description="Job result", alias="jobResult"
    )
    job_type: Optional[StrictStr] = Field(
        default=None, description="Job Type", alias="jobType"
    )
    __properties: ClassVar[List[str]] = [
        "uid",
        "deviceId",
        "message",
        "createTime",
        "updateTime",
        "sourceType",
        "sourceConfigUid",
        "sourceName",
        "subject",
        "userId",
        "psaTicketId",
        "ticketTemplateId",
        "data",
        "device",
        "jobStatus",
        "jobResult",
        "jobType",
    ]

    @field_validator("source_type")
    def source_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "AGENT_OFFLINE",
                "CONDITION_AGENT_CPU",
                "CONDITION_AGENT_MEMORY",
                "CONDITION_AGENT_NETWORK",
                "CONDITION_AGENT_DISK_IO",
                "CONDITION_AGENT_DISK_FREE_SPACE",
                "CONDITION_AGENT_DISK_USAGE",
                "CONDITION_AGENT_CVSS_SCORE",
                "CONDITION_AGENT_PATCH_LAST_INSTALLED",
                "CONDITION_NMS_CPU",
                "CONDITION_NMS_MEMORY",
                "CONDITION_NMS_NETWORK_TRAFFIC_BITS",
                "CONDITION_NMS_NETWORK_TRAFFIC_PERCENT",
                "CONDITION_NMS_NETWORK_STATUS",
                "CONDITION_NMS_NETWORK_STATUS_CHANGE",
                "CONDITION_NMS_SYSTEM_UPTIME",
                "CONDITION_PING",
                "CONDITION_PING_LATENCY",
                "CONDITION_PING_PACKET_LOSS",
                "CONDITION_PING_RESPONSE",
                "CONDITION_SYSTEM_UPTIME",
                "CONDITION_SMART_STATUS_DEGRATED",
                "CONDITION_RAID_HEALTH_STATUS",
                "CONDITION_SCRIPT_RESULT",
                "CONDITION_HTTP",
                "CONDITION_HTTP_RESPONSE",
                "CONDITION_PORT",
                "CONDITION_PORT_SCAN",
                "CONDITION_SYSLOG",
                "CONDITION_CONFIGURATION_FILE",
                "CONDITION_SNMPTRAP",
                "CONDITION_CRITICAL_EVENT",
                "CONDITION_DNS",
                "CONDITION_EMAIL",
                "CONDITION_CUSTOM_SNMP",
                "CONDITION_COMPOUND",
                "SHADOWPROTECT_BACKUPJOB_CREATE",
                "SHADOWPROTECT_BACKUPJOB_UPDATE",
                "SHADOWPROTECT_BACKUPJOB_DELETE",
                "SHADOWPROTECT_BACKUPJOB_EXECUTE",
                "IMAGEMANAGER_MANAGEDFOLDER_CREATE",
                "IMAGEMANAGER_MANAGEDFOLDER_UPDATE",
                "IMAGEMANAGER_MANAGEDFOLDER_DELETE",
                "IMAGEMANAGER_MANAGEDFOLDER_EXECUTE",
                "TEAMVIEWER_CONNECTION",
                "RETRIEVE_AGENT_LOGS",
                "SCHEDULED_TASK",
                "CONDITION_WINDOWS_EVENT_LOG_TRIGGERED",
                "CONDITION_WINDOWS_SERVICE_STATE_CHANGED",
                "UI_MESSAGE_ACTION_REBOOT",
                "UI_MESSAGE_BD_INSTALLATION_ISSUES",
                "GRAVITYZONE_UI_MESSAGE_INSTALLATION_ISSUES",
                "AV_QUARANTINE_THREAT",
                "AV_RESTORE_THREAT",
                "AV_DELETE_THREAT",
                "AV_REMOVE_THREAT",
                "BITDEFENDER_RESTORE_THREAT",
                "BITDEFENDER_DELETE_THREAT",
                "CONDITION_BITLOCKER_STATUS",
                "CONDITION_FILEVAULT_STATUS",
                "CONDITION_LINUX_PROCESS",
                "CONDITION_LINUX_Daemon",
                "CONDITION_LINUX_PROCESS_RESOURCE",
                "CONDITION_LINUX_PROCESS_RESOURCE_CPU",
                "CONDITION_LINUX_PROCESS_RESOURCE_MEMORY",
                "CONDITION_LINUX_DISK_FREE_SPACE",
                "CONDITION_LINUX_DISK_USAGE",
                "CONDITION_VM_AGGREGATE_CPU_USAGE",
                "CONDITION_VM_DISK_USAGE",
                "CONDITION_VM_HOST_DATASTORE",
                "CONDITION_VM_HOST_UPTIME",
                "CONDITION_VM_HOST_DEVICE_DOWN",
                "CONDITION_VM_HOST_BAD_SENSORS",
                "CONDITION_VM_HOST_SENSOR_HEALTH",
                "CONDITION_VM_GUEST_GUEST_OPERATIONAL_MODE",
                "CONDITION_VM_GUEST_SNAPSHOT_SIZE",
                "CONDITION_VM_GUEST_SNAPSHOT_LIFESPAN",
                "CONDITION_VM_GUEST_TOOLS_NOT_RUNNING",
                "CONDITION_HV_GUEST_CHECKPOINT_SIZE",
                "CONDITION_HV_GUEST_CHECKPOINT_LIFESPAN",
                "CONDITION_SOFTWARE",
                "CONDITION_WINDOWS_PROCESS_STATE",
                "CONDITION_WINDOWS_PROCESS_RESOURCE_CPU",
                "CONDITION_WINDOWS_PROCESS_RESOURCE_MEMORY",
                "CONDITION_MAC_PROCESS_STATE",
                "CONDITION_MAC_PROCESS_RESOURCE_CPU",
                "CONDITION_MAC_PROCESS_RESOURCE_MEMORY",
                "CONDITION_MAC_DEAMON",
                "CONDITION_CUSTOM_FIELD",
                "CONDITION_PENDING_REBOOT",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('AGENT_OFFLINE', 'CONDITION_AGENT_CPU', 'CONDITION_AGENT_MEMORY', 'CONDITION_AGENT_NETWORK', 'CONDITION_AGENT_DISK_IO', 'CONDITION_AGENT_DISK_FREE_SPACE', 'CONDITION_AGENT_DISK_USAGE', 'CONDITION_AGENT_CVSS_SCORE', 'CONDITION_AGENT_PATCH_LAST_INSTALLED', 'CONDITION_NMS_CPU', 'CONDITION_NMS_MEMORY', 'CONDITION_NMS_NETWORK_TRAFFIC_BITS', 'CONDITION_NMS_NETWORK_TRAFFIC_PERCENT', 'CONDITION_NMS_NETWORK_STATUS', 'CONDITION_NMS_NETWORK_STATUS_CHANGE', 'CONDITION_NMS_SYSTEM_UPTIME', 'CONDITION_PING', 'CONDITION_PING_LATENCY', 'CONDITION_PING_PACKET_LOSS', 'CONDITION_PING_RESPONSE', 'CONDITION_SYSTEM_UPTIME', 'CONDITION_SMART_STATUS_DEGRATED', 'CONDITION_RAID_HEALTH_STATUS', 'CONDITION_SCRIPT_RESULT', 'CONDITION_HTTP', 'CONDITION_HTTP_RESPONSE', 'CONDITION_PORT', 'CONDITION_PORT_SCAN', 'CONDITION_SYSLOG', 'CONDITION_CONFIGURATION_FILE', 'CONDITION_SNMPTRAP', 'CONDITION_CRITICAL_EVENT', 'CONDITION_DNS', 'CONDITION_EMAIL', 'CONDITION_CUSTOM_SNMP', 'CONDITION_COMPOUND', 'SHADOWPROTECT_BACKUPJOB_CREATE', 'SHADOWPROTECT_BACKUPJOB_UPDATE', 'SHADOWPROTECT_BACKUPJOB_DELETE', 'SHADOWPROTECT_BACKUPJOB_EXECUTE', 'IMAGEMANAGER_MANAGEDFOLDER_CREATE', 'IMAGEMANAGER_MANAGEDFOLDER_UPDATE', 'IMAGEMANAGER_MANAGEDFOLDER_DELETE', 'IMAGEMANAGER_MANAGEDFOLDER_EXECUTE', 'TEAMVIEWER_CONNECTION', 'RETRIEVE_AGENT_LOGS', 'SCHEDULED_TASK', 'CONDITION_WINDOWS_EVENT_LOG_TRIGGERED', 'CONDITION_WINDOWS_SERVICE_STATE_CHANGED', 'UI_MESSAGE_ACTION_REBOOT', 'UI_MESSAGE_BD_INSTALLATION_ISSUES', 'GRAVITYZONE_UI_MESSAGE_INSTALLATION_ISSUES', 'AV_QUARANTINE_THREAT', 'AV_RESTORE_THREAT', 'AV_DELETE_THREAT', 'AV_REMOVE_THREAT', 'BITDEFENDER_RESTORE_THREAT', 'BITDEFENDER_DELETE_THREAT', 'CONDITION_BITLOCKER_STATUS', 'CONDITION_FILEVAULT_STATUS', 'CONDITION_LINUX_PROCESS', 'CONDITION_LINUX_Daemon', 'CONDITION_LINUX_PROCESS_RESOURCE', 'CONDITION_LINUX_PROCESS_RESOURCE_CPU', 'CONDITION_LINUX_PROCESS_RESOURCE_MEMORY', 'CONDITION_LINUX_DISK_FREE_SPACE', 'CONDITION_LINUX_DISK_USAGE', 'CONDITION_VM_AGGREGATE_CPU_USAGE', 'CONDITION_VM_DISK_USAGE', 'CONDITION_VM_HOST_DATASTORE', 'CONDITION_VM_HOST_UPTIME', 'CONDITION_VM_HOST_DEVICE_DOWN', 'CONDITION_VM_HOST_BAD_SENSORS', 'CONDITION_VM_HOST_SENSOR_HEALTH', 'CONDITION_VM_GUEST_GUEST_OPERATIONAL_MODE', 'CONDITION_VM_GUEST_SNAPSHOT_SIZE', 'CONDITION_VM_GUEST_SNAPSHOT_LIFESPAN', 'CONDITION_VM_GUEST_TOOLS_NOT_RUNNING', 'CONDITION_HV_GUEST_CHECKPOINT_SIZE', 'CONDITION_HV_GUEST_CHECKPOINT_LIFESPAN', 'CONDITION_SOFTWARE', 'CONDITION_WINDOWS_PROCESS_STATE', 'CONDITION_WINDOWS_PROCESS_RESOURCE_CPU', 'CONDITION_WINDOWS_PROCESS_RESOURCE_MEMORY', 'CONDITION_MAC_PROCESS_STATE', 'CONDITION_MAC_PROCESS_RESOURCE_CPU', 'CONDITION_MAC_PROCESS_RESOURCE_MEMORY', 'CONDITION_MAC_DEAMON', 'CONDITION_CUSTOM_FIELD', 'CONDITION_PENDING_REBOOT')"
            )
        return value

    @field_validator("job_status")
    def job_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "START_REQUESTED",
                "STARTED",
                "IN_PROCESS",
                "COMPLETED",
                "CANCEL_REQUESTED",
                "CANCELLED",
                "WAITING_FOR_USER_RESPONSE",
                "TRIGGERED",
                "RESET",
                "ACKNOWLEDGED",
                "DISABLED",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('START_REQUESTED', 'STARTED', 'IN_PROCESS', 'COMPLETED', 'CANCEL_REQUESTED', 'CANCELLED', 'WAITING_FOR_USER_RESPONSE', 'TRIGGERED', 'RESET', 'ACKNOWLEDGED', 'DISABLED')"
            )
        return value

    @field_validator("job_result")
    def job_result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["SUCCESS", "FAILURE", "UNSUPPORTED", "UNCOMPLETED"]):
            raise ValueError(
                "must be one of enum values ('SUCCESS', 'FAILURE', 'UNSUPPORTED', 'UNCOMPLETED')"
            )
        return value

    @field_validator("job_type")
    def job_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "ACTIONSET",
                "ACTION",
                "CONDITION",
                "CONDITION_ACTIONSET",
                "CONDITION_ACTION",
                "ANTIVIRUS",
                "PATCH_MANAGEMENT",
                "TEAMVIEWER",
                "MONITOR",
                "SYSTEM",
                "COMMENT",
                "SHADOWPROTECT",
                "IMAGEMANAGER",
                "HELP_REQUEST",
                "SOFTWARE_PATCH_MANAGEMENT",
                "SPLASHTOP",
                "CLOUDBERRY",
                "CLOUDBERRY_BACKUP",
                "SCHEDULED_TASK",
                "RDP",
                "SCRIPTING",
                "SECURITY",
                "REMOTE_TOOLS",
                "VIRTUALIZATION",
                "PSA",
                "MDM",
                "NINJA_REMOTE",
                "NINJA_QUICK_CONNECT",
                "NINJA_NETWORK_DISCOVERY",
                "NINJA_BACKUP",
                "NINJA_TICKETING",
                "KNOWLEDGE_BASE",
                "RELATED_ITEM",
                "CLIENT_CHECKLIST",
                "CHECKLIST_TEMPLATE",
                "DOCUMENTATION",
                "MICROSOFT_INTUNE",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('ACTIONSET', 'ACTION', 'CONDITION', 'CONDITION_ACTIONSET', 'CONDITION_ACTION', 'ANTIVIRUS', 'PATCH_MANAGEMENT', 'TEAMVIEWER', 'MONITOR', 'SYSTEM', 'COMMENT', 'SHADOWPROTECT', 'IMAGEMANAGER', 'HELP_REQUEST', 'SOFTWARE_PATCH_MANAGEMENT', 'SPLASHTOP', 'CLOUDBERRY', 'CLOUDBERRY_BACKUP', 'SCHEDULED_TASK', 'RDP', 'SCRIPTING', 'SECURITY', 'REMOTE_TOOLS', 'VIRTUALIZATION', 'PSA', 'MDM', 'NINJA_REMOTE', 'NINJA_QUICK_CONNECT', 'NINJA_NETWORK_DISCOVERY', 'NINJA_BACKUP', 'NINJA_TICKETING', 'KNOWLEDGE_BASE', 'RELATED_ITEM', 'CLIENT_CHECKLIST', 'CHECKLIST_TEMPLATE', 'DOCUMENTATION', 'MICROSOFT_INTUNE')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Job from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of device
        if self.device:
            _dict["device"] = self.device.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Job from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "uid": obj.get("uid"),
                "deviceId": obj.get("deviceId"),
                "message": obj.get("message"),
                "createTime": obj.get("createTime"),
                "updateTime": obj.get("updateTime"),
                "sourceType": obj.get("sourceType"),
                "sourceConfigUid": obj.get("sourceConfigUid"),
                "sourceName": obj.get("sourceName"),
                "subject": obj.get("subject"),
                "userId": obj.get("userId"),
                "psaTicketId": obj.get("psaTicketId"),
                "ticketTemplateId": obj.get("ticketTemplateId"),
                "data": obj.get("data"),
                "device": NodeWithDetailedReferences.from_dict(obj["device"])
                if obj.get("device") is not None
                else None,
                "jobStatus": obj.get("jobStatus"),
                "jobResult": obj.get("jobResult"),
                "jobType": obj.get("jobType"),
            }
        )
        return _obj
