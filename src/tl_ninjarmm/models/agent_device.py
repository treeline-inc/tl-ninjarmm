# coding: utf-8

"""
NinjaOne Public API 2.0

NinjaOne Public API documentation.

The version of the OpenAPI document: 2.0.9-draft
Contact: api@ninjarmm.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from tl_ninjarmm.models.computer_system import ComputerSystem
from tl_ninjarmm.models.device import Device
from tl_ninjarmm.models.maintenance import Maintenance
from tl_ninjarmm.models.memory import Memory
from tl_ninjarmm.models.node_references import NodeReferences
from tl_ninjarmm.models.note import Note
from tl_ninjarmm.models.operating_system import OperatingSystem
from tl_ninjarmm.models.processor import Processor
from tl_ninjarmm.models.volume import Volume
from typing import Set
from typing_extensions import Self


class AgentDevice(Device):
    """
    AgentDevice
    """  # noqa: E501

    os: Optional[OperatingSystem] = None
    system: Optional[ComputerSystem] = None
    memory: Optional[Memory] = None
    processors: Optional[List[Processor]] = Field(
        default=None, description="Processors"
    )
    volumes: Optional[List[Volume]] = Field(default=None, description="Disk Volumes")
    last_logged_in_user: Optional[StrictStr] = Field(
        default=None,
        description="Username that logged in most recently",
        alias="lastLoggedInUser",
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "parentDeviceId",
        "organizationId",
        "locationId",
        "nodeClass",
        "nodeRoleId",
        "rolePolicyId",
        "policyId",
        "approvalStatus",
        "offline",
        "displayName",
        "systemName",
        "dnsName",
        "netbiosName",
        "created",
        "lastContact",
        "lastUpdate",
        "userData",
        "tags",
        "fields",
        "maintenance",
        "references",
        "ipAddresses",
        "macAddresses",
        "publicIP",
        "notes",
        "deviceType",
        "os",
        "system",
        "memory",
        "processors",
        "volumes",
        "lastLoggedInUser",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentDevice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of maintenance
        if self.maintenance:
            _dict["maintenance"] = self.maintenance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of references
        if self.references:
            _dict["references"] = self.references.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in notes (list)
        _items = []
        if self.notes:
            for _item_notes in self.notes:
                if _item_notes:
                    _items.append(_item_notes.to_dict())
            _dict["notes"] = _items
        # override the default output from pydantic by calling `to_dict()` of os
        if self.os:
            _dict["os"] = self.os.to_dict()
        # override the default output from pydantic by calling `to_dict()` of system
        if self.system:
            _dict["system"] = self.system.to_dict()
        # override the default output from pydantic by calling `to_dict()` of memory
        if self.memory:
            _dict["memory"] = self.memory.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in processors (list)
        _items = []
        if self.processors:
            for _item_processors in self.processors:
                if _item_processors:
                    _items.append(_item_processors.to_dict())
            _dict["processors"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in volumes (list)
        _items = []
        if self.volumes:
            for _item_volumes in self.volumes:
                if _item_volumes:
                    _items.append(_item_volumes.to_dict())
            _dict["volumes"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentDevice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "parentDeviceId": obj.get("parentDeviceId"),
                "organizationId": obj.get("organizationId"),
                "locationId": obj.get("locationId"),
                "nodeClass": obj.get("nodeClass"),
                "nodeRoleId": obj.get("nodeRoleId"),
                "rolePolicyId": obj.get("rolePolicyId"),
                "policyId": obj.get("policyId"),
                "approvalStatus": obj.get("approvalStatus"),
                "offline": obj.get("offline"),
                "displayName": obj.get("displayName"),
                "systemName": obj.get("systemName"),
                "dnsName": obj.get("dnsName"),
                "netbiosName": obj.get("netbiosName"),
                "created": obj.get("created"),
                "lastContact": obj.get("lastContact"),
                "lastUpdate": obj.get("lastUpdate"),
                "userData": obj.get("userData"),
                "tags": obj.get("tags"),
                "fields": obj.get("fields"),
                "maintenance": Maintenance.from_dict(obj["maintenance"])
                if obj.get("maintenance") is not None
                else None,
                "references": NodeReferences.from_dict(obj["references"])
                if obj.get("references") is not None
                else None,
                "ipAddresses": obj.get("ipAddresses"),
                "macAddresses": obj.get("macAddresses"),
                "publicIP": obj.get("publicIP"),
                "notes": [Note.from_dict(_item) for _item in obj["notes"]]
                if obj.get("notes") is not None
                else None,
                "deviceType": obj.get("deviceType"),
                "os": OperatingSystem.from_dict(obj["os"])
                if obj.get("os") is not None
                else None,
                "system": ComputerSystem.from_dict(obj["system"])
                if obj.get("system") is not None
                else None,
                "memory": Memory.from_dict(obj["memory"])
                if obj.get("memory") is not None
                else None,
                "processors": [
                    Processor.from_dict(_item) for _item in obj["processors"]
                ]
                if obj.get("processors") is not None
                else None,
                "volumes": [Volume.from_dict(_item) for _item in obj["volumes"]]
                if obj.get("volumes") is not None
                else None,
                "lastLoggedInUser": obj.get("lastLoggedInUser"),
            }
        )
        return _obj
