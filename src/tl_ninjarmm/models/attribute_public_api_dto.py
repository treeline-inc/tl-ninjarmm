# coding: utf-8

"""
NinjaOne Public API 2.0

NinjaOne Public API documentation.

The version of the OpenAPI document: 2.0.9-draft
Contact: api@ninjarmm.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional, Union
from tl_ninjarmm.models.attribute_content import AttributeContent
from typing import Set
from typing_extensions import Self


class AttributePublicApiDTO(BaseModel):
    """
    AttributePublicApiDTO
    """  # noqa: E501

    entity_type: Optional[StrictStr] = Field(
        default=None, description="Entity Type", alias="entityType"
    )
    scope: Optional[StrictStr] = Field(default=None, description="Scope")
    definition_scope: Optional[List[StrictStr]] = Field(
        default=None, description="Definition Scope", alias="definitionScope"
    )
    type: Optional[StrictStr] = Field(default=None, description="Type")
    label: Optional[StrictStr] = Field(default=None, description="Label")
    description: Optional[StrictStr] = Field(default=None, description="Description")
    name: Optional[StrictStr] = Field(default=None, description="Name")
    default_value: Optional[StrictStr] = Field(
        default=None, description="Default Value", alias="defaultValue"
    )
    end_user_permission: Optional[StrictStr] = Field(
        default=None, description="End User Permission", alias="endUserPermission"
    )
    technician_permission: Optional[StrictStr] = Field(
        default=None, description="Technician Permission", alias="technicianPermission"
    )
    script_permission: Optional[StrictStr] = Field(
        default=None, description="Script Permission", alias="scriptPermission"
    )
    api_permission: Optional[StrictStr] = Field(
        default=None, description="Public API Permission", alias="apiPermission"
    )
    content: Optional[AttributeContent] = None
    system: Optional[StrictBool] = Field(default=None, description="System")
    active: Optional[StrictBool] = Field(default=None, description="Active")
    create_time: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Create Time", alias="createTime"
    )
    update_time: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Update Time", alias="updateTime"
    )
    __properties: ClassVar[List[str]] = [
        "entityType",
        "scope",
        "definitionScope",
        "type",
        "label",
        "description",
        "name",
        "defaultValue",
        "endUserPermission",
        "technicianPermission",
        "scriptPermission",
        "apiPermission",
        "content",
        "system",
        "active",
        "createTime",
        "updateTime",
    ]

    @field_validator("entity_type")
    def entity_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["USER", "NODE", "TICKET", "DOCUMENT"]):
            raise ValueError(
                "must be one of enum values ('USER', 'NODE', 'TICKET', 'DOCUMENT')"
            )
        return value

    @field_validator("scope")
    def scope_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["NODE_GLOBAL", "NODE_ROLE", "NODE_CLASS"]):
            raise ValueError(
                "must be one of enum values ('NODE_GLOBAL', 'NODE_ROLE', 'NODE_CLASS')"
            )
        return value

    @field_validator("definition_scope")
    def definition_scope_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(["NODE", "END_USER", "LOCATION", "ORGANIZATION"]):
                raise ValueError(
                    "each list item must be one of ('NODE', 'END_USER', 'LOCATION', 'ORGANIZATION')"
                )
        return value

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "DROPDOWN",
                "MULTI_SELECT",
                "CHECKBOX",
                "TEXT",
                "TEXT_MULTILINE",
                "TEXT_ENCRYPTED",
                "NUMERIC",
                "DECIMAL",
                "DATE",
                "DATE_TIME",
                "TIME",
                "ATTACHMENT",
                "NODE_DROPDOWN",
                "NODE_MULTI_SELECT",
                "CLIENT_DROPDOWN",
                "CLIENT_MULTI_SELECT",
                "CLIENT_LOCATION_DROPDOWN",
                "CLIENT_LOCATION_MULTI_SELECT",
                "CLIENT_DOCUMENT_DROPDOWN",
                "CLIENT_DOCUMENT_MULTI_SELECT",
                "EMAIL",
                "PHONE",
                "IP_ADDRESS",
                "WYSIWYG",
                "URL",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('DROPDOWN', 'MULTI_SELECT', 'CHECKBOX', 'TEXT', 'TEXT_MULTILINE', 'TEXT_ENCRYPTED', 'NUMERIC', 'DECIMAL', 'DATE', 'DATE_TIME', 'TIME', 'ATTACHMENT', 'NODE_DROPDOWN', 'NODE_MULTI_SELECT', 'CLIENT_DROPDOWN', 'CLIENT_MULTI_SELECT', 'CLIENT_LOCATION_DROPDOWN', 'CLIENT_LOCATION_MULTI_SELECT', 'CLIENT_DOCUMENT_DROPDOWN', 'CLIENT_DOCUMENT_MULTI_SELECT', 'EMAIL', 'PHONE', 'IP_ADDRESS', 'WYSIWYG', 'URL')"
            )
        return value

    @field_validator("end_user_permission")
    def end_user_permission_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            ["HIDDEN", "EDITABLE_OPTIONAL", "EDITABLE_REQUIRED", "READ_ONLY"]
        ):
            raise ValueError(
                "must be one of enum values ('HIDDEN', 'EDITABLE_OPTIONAL', 'EDITABLE_REQUIRED', 'READ_ONLY')"
            )
        return value

    @field_validator("technician_permission")
    def technician_permission_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["NONE", "EDITABLE", "READ_ONLY"]):
            raise ValueError(
                "must be one of enum values ('NONE', 'EDITABLE', 'READ_ONLY')"
            )
        return value

    @field_validator("script_permission")
    def script_permission_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["NONE", "READ_ONLY", "WRITE_ONLY", "READ_WRITE"]):
            raise ValueError(
                "must be one of enum values ('NONE', 'READ_ONLY', 'WRITE_ONLY', 'READ_WRITE')"
            )
        return value

    @field_validator("api_permission")
    def api_permission_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["NONE", "READ_ONLY", "WRITE_ONLY", "READ_WRITE"]):
            raise ValueError(
                "must be one of enum values ('NONE', 'READ_ONLY', 'WRITE_ONLY', 'READ_WRITE')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AttributePublicApiDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict["content"] = self.content.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AttributePublicApiDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "entityType": obj.get("entityType"),
                "scope": obj.get("scope"),
                "definitionScope": obj.get("definitionScope"),
                "type": obj.get("type"),
                "label": obj.get("label"),
                "description": obj.get("description"),
                "name": obj.get("name"),
                "defaultValue": obj.get("defaultValue"),
                "endUserPermission": obj.get("endUserPermission"),
                "technicianPermission": obj.get("technicianPermission"),
                "scriptPermission": obj.get("scriptPermission"),
                "apiPermission": obj.get("apiPermission"),
                "content": AttributeContent.from_dict(obj["content"])
                if obj.get("content") is not None
                else None,
                "system": obj.get("system"),
                "active": obj.get("active"),
                "createTime": obj.get("createTime"),
                "updateTime": obj.get("updateTime"),
            }
        )
        return _obj
