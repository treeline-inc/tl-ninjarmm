# coding: utf-8

"""
NinjaOne Public API 2.0

NinjaOne Public API documentation.

The version of the OpenAPI document: 2.0.9-draft
Contact: api@ninjarmm.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self


class Technician(BaseModel):
    """
    Technician
    """  # noqa: E501

    id: Optional[StrictInt] = Field(default=None, description="User identifier")
    uid: Optional[StrictStr] = Field(
        default=None, description="User universally unique identifier"
    )
    enabled: Optional[StrictBool] = Field(
        default=None, description="User access status"
    )
    first_name: Optional[StrictStr] = Field(
        default=None, description="First name", alias="firstName"
    )
    last_name: Optional[StrictStr] = Field(
        default=None, description="Last name", alias="lastName"
    )
    email: Optional[StrictStr] = Field(default=None, description="Email address")
    phone: Optional[StrictStr] = Field(default=None, description="Phone number")
    must_change_pw: Optional[StrictBool] = Field(
        default=None,
        description="Must change password during next login",
        alias="mustChangePw",
    )
    mfa_configured: Optional[StrictBool] = Field(
        default=None,
        description="At least one MFA method is configured",
        alias="mfaConfigured",
    )
    scim_user: Optional[StrictBool] = Field(
        default=None, description="User is created by SCIM?", alias="scimUser"
    )
    auth_type: Optional[StrictStr] = Field(
        default=None, description="Native or SSO authentication", alias="authType"
    )
    user_type: Optional[StrictStr] = Field(
        default=None, description="User type", alias="userType"
    )
    invitation_status: Optional[StrictStr] = Field(
        default=None, description="User invitation status", alias="invitationStatus"
    )
    notify_all_clients: Optional[StrictBool] = Field(
        default=None,
        description="Notifications for all clients",
        alias="notifyAllClients",
    )
    administrator: Optional[StrictBool] = Field(
        default=None, description="Technician is a System Administrator"
    )
    assigned_device_ids: Optional[List[StrictInt]] = Field(
        default=None,
        description="Device IDs which user is assigned",
        alias="assignedDeviceIds",
    )
    roles: Optional[List[StrictStr]] = Field(
        default=None,
        description="A list of role names assigned to the technician. This is provided when the 'includeRoles' query parameter is set to 'true'",
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "uid",
        "enabled",
        "firstName",
        "lastName",
        "email",
        "phone",
        "mustChangePw",
        "mfaConfigured",
        "scimUser",
        "authType",
        "userType",
        "invitationStatus",
        "notifyAllClients",
        "administrator",
        "assignedDeviceIds",
        "roles",
    ]

    @field_validator("user_type")
    def user_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["TECHNICIAN", "END_USER"]):
            raise ValueError("must be one of enum values ('TECHNICIAN', 'END_USER')")
        return value

    @field_validator("invitation_status")
    def invitation_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["REGISTERED", "PENDING", "EXPIRED"]):
            raise ValueError(
                "must be one of enum values ('REGISTERED', 'PENDING', 'EXPIRED')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Technician from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Technician from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "uid": obj.get("uid"),
                "enabled": obj.get("enabled"),
                "firstName": obj.get("firstName"),
                "lastName": obj.get("lastName"),
                "email": obj.get("email"),
                "phone": obj.get("phone"),
                "mustChangePw": obj.get("mustChangePw"),
                "mfaConfigured": obj.get("mfaConfigured"),
                "scimUser": obj.get("scimUser"),
                "authType": obj.get("authType"),
                "userType": obj.get("userType"),
                "invitationStatus": obj.get("invitationStatus"),
                "notifyAllClients": obj.get("notifyAllClients"),
                "administrator": obj.get("administrator"),
                "assignedDeviceIds": obj.get("assignedDeviceIds"),
                "roles": obj.get("roles"),
            }
        )
        return _obj
