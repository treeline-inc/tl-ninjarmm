# coding: utf-8

"""
    NinjaOne Public API 2.0

    Ninja One Public API documentation. <br><br> See also: <br>  <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Device+Filter+Syntax.pdf\">Device Filter syntax</a><br> <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Webhooks.pdf\">Webhooks</a>

    The version of the OpenAPI document: 2.0.9-draft
    Contact: api@ninjarmm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class LocationBackupUsageSummary(BaseModel):
    """
    LocationBackupUsageSummary
    """ # noqa: E501
    location_id: Optional[StrictInt] = Field(default=None, description="Device location id", alias="locationId")
    location_name: Optional[StrictStr] = Field(default=None, description="Device location name", alias="locationName")
    location_description: Optional[StrictStr] = Field(default=None, description="Device location description", alias="locationDescription")
    revisions_current_size: Optional[StrictInt] = Field(default=None, alias="revisionsCurrentSize")
    revisions_previous_size: Optional[StrictInt] = Field(default=None, alias="revisionsPreviousSize")
    revisions_deleted_size: Optional[StrictInt] = Field(default=None, alias="revisionsDeletedSize")
    local_file_folder_size: Optional[StrictInt] = Field(default=None, alias="localFileFolderSize")
    local_image_size: Optional[StrictInt] = Field(default=None, alias="localImageSize")
    local_image_v2_size: Optional[StrictInt] = Field(default=None, alias="localImageV2Size")
    cloud_file_folder_size: Optional[StrictInt] = Field(default=None, alias="cloudFileFolderSize")
    cloud_image_size: Optional[StrictInt] = Field(default=None, alias="cloudImageSize")
    cloud_image_v2_size: Optional[StrictInt] = Field(default=None, alias="cloudImageV2Size")
    last_successful_backup_job: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="lastSuccessfulBackupJob")
    last_failed_backup_job: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="lastFailedBackupJob")
    organization_id: Optional[StrictInt] = Field(default=None, alias="organizationId")
    organization_name: Optional[StrictStr] = Field(default=None, alias="organizationName")
    revisions_total_size: Optional[StrictInt] = Field(default=None, description="Revisions total size", alias="revisionsTotalSize")
    cloud_total_size: Optional[StrictInt] = Field(default=None, description="Revisions cloud total size", alias="cloudTotalSize")
    local_total_size: Optional[StrictInt] = Field(default=None, description="Revisions local total size", alias="localTotalSize")
    __properties: ClassVar[List[str]] = ["locationId", "locationName", "locationDescription", "revisionsCurrentSize", "revisionsPreviousSize", "revisionsDeletedSize", "localFileFolderSize", "localImageSize", "localImageV2Size", "cloudFileFolderSize", "cloudImageSize", "cloudImageV2Size", "lastSuccessfulBackupJob", "lastFailedBackupJob", "organizationId", "organizationName", "revisionsTotalSize", "cloudTotalSize", "localTotalSize"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LocationBackupUsageSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "revisions_total_size",
            "cloud_total_size",
            "local_total_size",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LocationBackupUsageSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "locationId": obj.get("locationId"),
            "locationName": obj.get("locationName"),
            "locationDescription": obj.get("locationDescription"),
            "revisionsCurrentSize": obj.get("revisionsCurrentSize"),
            "revisionsPreviousSize": obj.get("revisionsPreviousSize"),
            "revisionsDeletedSize": obj.get("revisionsDeletedSize"),
            "localFileFolderSize": obj.get("localFileFolderSize"),
            "localImageSize": obj.get("localImageSize"),
            "localImageV2Size": obj.get("localImageV2Size"),
            "cloudFileFolderSize": obj.get("cloudFileFolderSize"),
            "cloudImageSize": obj.get("cloudImageSize"),
            "cloudImageV2Size": obj.get("cloudImageV2Size"),
            "lastSuccessfulBackupJob": obj.get("lastSuccessfulBackupJob"),
            "lastFailedBackupJob": obj.get("lastFailedBackupJob"),
            "organizationId": obj.get("organizationId"),
            "organizationName": obj.get("organizationName"),
            "revisionsTotalSize": obj.get("revisionsTotalSize"),
            "cloudTotalSize": obj.get("cloudTotalSize"),
            "localTotalSize": obj.get("localTotalSize")
        })
        return _obj


