# coding: utf-8

"""
    NinjaOne Public API 2.0

    Ninja One Public API documentation. <br><br> See also: <br>  <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Device+Filter+Syntax.pdf\">Device Filter syntax</a><br> <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Webhooks.pdf\">Webhooks</a>

    The version of the OpenAPI document: 2.0.9-draft
    Contact: api@ninjarmm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from tl_ninjarmm.models.create_knowledge_base_articles200_response_inner_attachments_inner import CreateKnowledgeBaseArticles200ResponseInnerAttachmentsInner
from tl_ninjarmm.models.create_knowledge_base_articles_request_inner_content import CreateKnowledgeBaseArticlesRequestInnerContent
from typing import Optional, Set
from typing_extensions import Self

class CreateKnowledgeBaseArticles200ResponseInner(BaseModel):
    """
    CreateKnowledgeBaseArticles200ResponseInner
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Identifier")
    organization_id: Optional[StrictInt] = Field(default=None, description="Organization identifier", alias="organizationId")
    parent_folder_id: Optional[StrictInt] = Field(default=None, description="Parent folder identifier", alias="parentFolderId")
    name: Optional[StrictStr] = Field(default=None, description="Article name")
    is_ninja_article: Optional[StrictBool] = Field(default=None, description="Indicates if the article was created in ninja", alias="isNinjaArticle")
    is_archived: Optional[StrictBool] = Field(default=None, description="Indicates if the article is archived", alias="isArchived")
    attachments: Optional[List[CreateKnowledgeBaseArticles200ResponseInnerAttachmentsInner]] = Field(default=None, description="Lists the files associated with the article")
    content: Optional[CreateKnowledgeBaseArticlesRequestInnerContent] = None
    create_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Article created time", alias="createTime")
    update_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Article last updated time", alias="updateTime")
    archived_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Article archived time", alias="archivedTime")
    path: Optional[StrictStr] = Field(default=None, description="Article path")
    __properties: ClassVar[List[str]] = ["id", "organizationId", "parentFolderId", "name", "isNinjaArticle", "isArchived", "attachments", "content", "createTime", "updateTime", "archivedTime", "path"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateKnowledgeBaseArticles200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateKnowledgeBaseArticles200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "organizationId": obj.get("organizationId"),
            "parentFolderId": obj.get("parentFolderId"),
            "name": obj.get("name"),
            "isNinjaArticle": obj.get("isNinjaArticle"),
            "isArchived": obj.get("isArchived"),
            "attachments": [CreateKnowledgeBaseArticles200ResponseInnerAttachmentsInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "content": CreateKnowledgeBaseArticlesRequestInnerContent.from_dict(obj["content"]) if obj.get("content") is not None else None,
            "createTime": obj.get("createTime"),
            "updateTime": obj.get("updateTime"),
            "archivedTime": obj.get("archivedTime"),
            "path": obj.get("path")
        })
        return _obj


