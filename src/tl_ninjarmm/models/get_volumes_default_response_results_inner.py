# coding: utf-8

"""
    NinjaOne Public API 2.0

    Ninja One Public API documentation. <br><br> See also: <br>  <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Device+Filter+Syntax.pdf\">Device Filter syntax</a><br> <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Webhooks.pdf\">Webhooks</a>

    The version of the OpenAPI document: 2.0.9-draft
    Contact: api@ninjarmm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from tl_ninjarmm.models.get_device_volumes_default_response_inner_bit_locker_status import GetDeviceVolumesDefaultResponseInnerBitLockerStatus
from typing import Optional, Set
from typing_extensions import Self

class GetVolumesDefaultResponseResultsInner(BaseModel):
    """
    GetVolumesDefaultResponseResultsInner
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name")
    drive_letter: Optional[StrictStr] = Field(default=None, description="Drive Letter", alias="driveLetter")
    label: Optional[StrictStr] = Field(default=None, description="Volume Label")
    device_type: Optional[StrictStr] = Field(default=None, description="Device Type", alias="deviceType")
    file_system: Optional[StrictStr] = Field(default=None, description="File System Type", alias="fileSystem")
    auto_mount: Optional[StrictBool] = Field(default=None, description="Automatically Mounted", alias="autoMount")
    compressed: Optional[StrictBool] = Field(default=None, description="Compressed")
    capacity: Optional[StrictInt] = Field(default=None, description="Capacity (bytes)")
    free_space: Optional[StrictInt] = Field(default=None, description="Free Space (bytes)", alias="freeSpace")
    serial_number: Optional[StrictStr] = Field(default=None, description="Serial Number", alias="serialNumber")
    bit_locker_status: Optional[GetDeviceVolumesDefaultResponseInnerBitLockerStatus] = Field(default=None, alias="bitLockerStatus")
    device_id: Optional[StrictInt] = Field(default=None, description="Device identifier", alias="deviceId")
    timestamp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Date/Time when data was collected/updated")
    __properties: ClassVar[List[str]] = ["name", "driveLetter", "label", "deviceType", "fileSystem", "autoMount", "compressed", "capacity", "freeSpace", "serialNumber", "bitLockerStatus", "deviceId", "timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetVolumesDefaultResponseResultsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bit_locker_status
        if self.bit_locker_status:
            _dict['bitLockerStatus'] = self.bit_locker_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetVolumesDefaultResponseResultsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "driveLetter": obj.get("driveLetter"),
            "label": obj.get("label"),
            "deviceType": obj.get("deviceType"),
            "fileSystem": obj.get("fileSystem"),
            "autoMount": obj.get("autoMount"),
            "compressed": obj.get("compressed"),
            "capacity": obj.get("capacity"),
            "freeSpace": obj.get("freeSpace"),
            "serialNumber": obj.get("serialNumber"),
            "bitLockerStatus": GetDeviceVolumesDefaultResponseInnerBitLockerStatus.from_dict(obj["bitLockerStatus"]) if obj.get("bitLockerStatus") is not None else None,
            "deviceId": obj.get("deviceId"),
            "timestamp": obj.get("timestamp")
        })
        return _obj


