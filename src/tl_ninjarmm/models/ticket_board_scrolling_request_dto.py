# coding: utf-8

"""
    NinjaOne Public API 2.0

    Ninja One Public API documentation. <br><br> See also: <br>  <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Device+Filter+Syntax.pdf\">Device Filter syntax</a><br> <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Webhooks.pdf\">Webhooks</a>

    The version of the OpenAPI document: 2.0.9-draft
    Contact: api@ninjarmm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from tl_ninjarmm.models.get_boards_default_response_inner_conditions_any_inner import GetBoardsDefaultResponseInnerConditionsAnyInner
from tl_ninjarmm.models.get_tickets_by_board_request_sort_by_inner import GetTicketsByBoardRequestSortByInner
from typing import Optional, Set
from typing_extensions import Self

class TicketBoardScrollingRequestDTO(BaseModel):
    """
    TicketBoardScrollingRequestDTO
    """ # noqa: E501
    sort_by: Optional[List[GetTicketsByBoardRequestSortByInner]] = Field(default=None, alias="sortBy")
    filters: Optional[List[GetBoardsDefaultResponseInnerConditionsAnyInner]] = None
    page_size: Optional[StrictInt] = Field(default=None, alias="pageSize")
    search_criteria: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=512)]] = Field(default=None, alias="searchCriteria")
    include_columns: Optional[List[StrictStr]] = Field(default=None, alias="includeColumns")
    last_cursor_id: Optional[StrictInt] = Field(default=None, alias="lastCursorId")
    __properties: ClassVar[List[str]] = ["sortBy", "filters", "pageSize", "searchCriteria", "includeColumns", "lastCursorId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TicketBoardScrollingRequestDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sort_by (list)
        _items = []
        if self.sort_by:
            for _item_sort_by in self.sort_by:
                if _item_sort_by:
                    _items.append(_item_sort_by.to_dict())
            _dict['sortBy'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in filters (list)
        _items = []
        if self.filters:
            for _item_filters in self.filters:
                if _item_filters:
                    _items.append(_item_filters.to_dict())
            _dict['filters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TicketBoardScrollingRequestDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sortBy": [GetTicketsByBoardRequestSortByInner.from_dict(_item) for _item in obj["sortBy"]] if obj.get("sortBy") is not None else None,
            "filters": [GetBoardsDefaultResponseInnerConditionsAnyInner.from_dict(_item) for _item in obj["filters"]] if obj.get("filters") is not None else None,
            "pageSize": obj.get("pageSize"),
            "searchCriteria": obj.get("searchCriteria"),
            "includeColumns": obj.get("includeColumns"),
            "lastCursorId": obj.get("lastCursorId")
        })
        return _obj


