# coding: utf-8

"""
    NinjaOne Public API 2.0

    Ninja One Public API documentation. <br><br> See also: <br>  <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Device+Filter+Syntax.pdf\">Device Filter syntax</a><br> <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Webhooks.pdf\">Webhooks</a>

    The version of the OpenAPI document: 2.0.9-draft
    Contact: api@ninjarmm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from tl_ninjarmm.models.archive_client_document200_response_fields_inner import ArchiveClientDocument200ResponseFieldsInner
from typing import Optional, Set
from typing_extensions import Self

class ClientDocumentWithAttributeValuesPublicApiDTO(BaseModel):
    """
    ClientDocumentWithAttributeValuesPublicApiDTO
    """ # noqa: E501
    document_id: Optional[StrictInt] = Field(default=None, description="Document Identifier", alias="documentId")
    document_name: Optional[StrictStr] = Field(default=None, description="Document Name", alias="documentName")
    document_description: Optional[StrictStr] = Field(default=None, description="Document Description", alias="documentDescription")
    document_update_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Document Last Updated", alias="documentUpdateTime")
    fields: Optional[List[ArchiveClientDocument200ResponseFieldsInner]] = Field(default=None, description="Fields")
    document_template_id: Optional[StrictInt] = Field(default=None, description="Document Template Identifier", alias="documentTemplateId")
    document_template_name: Optional[StrictStr] = Field(default=None, description="Document Template Name", alias="documentTemplateName")
    organization_id: Optional[StrictInt] = Field(default=None, description="Organization Identifier", alias="organizationId")
    __properties: ClassVar[List[str]] = ["documentId", "documentName", "documentDescription", "documentUpdateTime", "fields", "documentTemplateId", "documentTemplateName", "organizationId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClientDocumentWithAttributeValuesPublicApiDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in fields (list)
        _items = []
        if self.fields:
            for _item_fields in self.fields:
                if _item_fields:
                    _items.append(_item_fields.to_dict())
            _dict['fields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClientDocumentWithAttributeValuesPublicApiDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "documentId": obj.get("documentId"),
            "documentName": obj.get("documentName"),
            "documentDescription": obj.get("documentDescription"),
            "documentUpdateTime": obj.get("documentUpdateTime"),
            "fields": [ArchiveClientDocument200ResponseFieldsInner.from_dict(_item) for _item in obj["fields"]] if obj.get("fields") is not None else None,
            "documentTemplateId": obj.get("documentTemplateId"),
            "documentTemplateName": obj.get("documentTemplateName"),
            "organizationId": obj.get("organizationId")
        })
        return _obj


