# coding: utf-8

"""
    NinjaOne Public API 2.0

    Ninja One Public API documentation. <br><br> See also: <br>  <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Device+Filter+Syntax.pdf\">Device Filter syntax</a><br> <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Webhooks.pdf\">Webhooks</a>

    The version of the OpenAPI document: 2.0.9-draft
    Contact: api@ninjarmm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from tl_ninjarmm.models.create_organization_request_locations_inner import CreateOrganizationRequestLocationsInner
from tl_ninjarmm.models.create_organization_request_policies_inner import CreateOrganizationRequestPoliciesInner
from typing import Optional, Set
from typing_extensions import Self

class CreateOrganizationRequest(BaseModel):
    """
    CreateOrganizationRequest
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Organization full name")
    description: Optional[StrictStr] = Field(default=None, description="Organization Description")
    user_data: Optional[Dict[str, Any]] = Field(default=None, description="Custom attributes", alias="userData")
    node_approval_mode: Optional[StrictStr] = Field(default=None, description="Device Approval Mode", alias="nodeApprovalMode")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Tags")
    fields: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="Custom Fields")
    locations: Optional[List[CreateOrganizationRequestLocationsInner]] = Field(default=None, description="List of locations")
    policies: Optional[List[CreateOrganizationRequestPoliciesInner]] = Field(default=None, description="Node role policy assignments")
    __properties: ClassVar[List[str]] = ["name", "description", "userData", "nodeApprovalMode", "tags", "fields", "locations", "policies"]

    @field_validator('node_approval_mode')
    def node_approval_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AUTOMATIC', 'MANUAL', 'REJECT']):
            raise ValueError("must be one of enum values ('AUTOMATIC', 'MANUAL', 'REJECT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateOrganizationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in locations (list)
        _items = []
        if self.locations:
            for _item_locations in self.locations:
                if _item_locations:
                    _items.append(_item_locations.to_dict())
            _dict['locations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in policies (list)
        _items = []
        if self.policies:
            for _item_policies in self.policies:
                if _item_policies:
                    _items.append(_item_policies.to_dict())
            _dict['policies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateOrganizationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "userData": obj.get("userData"),
            "nodeApprovalMode": obj.get("nodeApprovalMode"),
            "tags": obj.get("tags"),
            "fields": obj.get("fields"),
            "locations": [CreateOrganizationRequestLocationsInner.from_dict(_item) for _item in obj["locations"]] if obj.get("locations") is not None else None,
            "policies": [CreateOrganizationRequestPoliciesInner.from_dict(_item) for _item in obj["policies"]] if obj.get("policies") is not None else None
        })
        return _obj


