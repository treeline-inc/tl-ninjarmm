# coding: utf-8

"""
    NinjaOne Public API 2.0

    Ninja One Public API documentation. <br><br> See also: <br>  <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Device+Filter+Syntax.pdf\">Device Filter syntax</a><br> <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Webhooks.pdf\">Webhooks</a>

    The version of the OpenAPI document: 2.0.9-draft
    Contact: api@ninjarmm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from tl_ninjarmm.models.get_custom_fields_detailed_report_default_response_results_inner_fields_inner_updated_by import GetCustomFieldsDetailedReportDefaultResponseResultsInnerFieldsInnerUpdatedBy
from typing import Optional, Set
from typing_extensions import Self

class GetCustomFieldsDetailedReportDefaultResponseResultsInnerFieldsInner(BaseModel):
    """
    Field values
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Field name")
    value: Optional[Dict[str, Any]] = Field(default=None, description="Field Value")
    updated: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Last field update timestamp")
    updated_by: Optional[GetCustomFieldsDetailedReportDefaultResponseResultsInnerFieldsInnerUpdatedBy] = Field(default=None, alias="updatedBy")
    update_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="updateTime")
    __properties: ClassVar[List[str]] = ["name", "value", "updated", "updatedBy", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetCustomFieldsDetailedReportDefaultResponseResultsInnerFieldsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of updated_by
        if self.updated_by:
            _dict['updatedBy'] = self.updated_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetCustomFieldsDetailedReportDefaultResponseResultsInnerFieldsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "value": obj.get("value"),
            "updated": obj.get("updated"),
            "updatedBy": GetCustomFieldsDetailedReportDefaultResponseResultsInnerFieldsInnerUpdatedBy.from_dict(obj["updatedBy"]) if obj.get("updatedBy") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj


