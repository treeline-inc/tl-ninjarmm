# coding: utf-8

"""
    NinjaOne Public API 2.0

    Ninja One Public API documentation. <br><br> See also: <br>  <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Device+Filter+Syntax.pdf\">Device Filter syntax</a><br> <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Webhooks.pdf\">Webhooks</a>

    The version of the OpenAPI document: 2.0.9-draft
    Contact: api@ninjarmm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from tl_ninjarmm.models.get_device_active_jobs_default_response_inner_device import GetDeviceActiveJobsDefaultResponseInnerDevice
from typing import Optional, Set
from typing_extensions import Self

class LockhartIntegrityCheckJobReportResultsInner(BaseModel):
    """
    The integrity check job information.
    """ # noqa: E501
    device_id: Optional[StrictInt] = Field(default=None, description="Device identifier", alias="deviceId")
    device: Optional[GetDeviceActiveJobsDefaultResponseInnerDevice] = None
    job_id: Optional[StrictStr] = Field(default=None, description="Job id.", alias="jobId")
    job_start_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Job start time.", alias="jobStartTime")
    job_end_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Job end time.", alias="jobEndTime")
    job_status: Optional[StrictStr] = Field(default=None, description="Job status.", alias="jobStatus")
    plan_guid: Optional[StrictStr] = Field(default=None, description="Plan id.", alias="planGuid")
    plan_name: Optional[StrictStr] = Field(default=None, description="Plan name.", alias="planName")
    plan_type: Optional[StrictStr] = Field(default=None, description="Plan type.", alias="planType")
    total_actual_storage_bytes: Optional[StrictInt] = Field(default=None, description="Total bytes", alias="totalActualStorageBytes")
    total_actual_storage_files: Optional[StrictInt] = Field(default=None, description="Total files.", alias="totalActualStorageFiles")
    actual_bytes_checked: Optional[StrictInt] = Field(default=None, description="Bytes checked.", alias="actualBytesChecked")
    actual_files_checked: Optional[StrictInt] = Field(default=None, description="Files checked.", alias="actualFilesChecked")
    __properties: ClassVar[List[str]] = ["deviceId", "device", "jobId", "jobStartTime", "jobEndTime", "jobStatus", "planGuid", "planName", "planType", "totalActualStorageBytes", "totalActualStorageFiles", "actualBytesChecked", "actualFilesChecked"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LockhartIntegrityCheckJobReportResultsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of device
        if self.device:
            _dict['device'] = self.device.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LockhartIntegrityCheckJobReportResultsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deviceId": obj.get("deviceId"),
            "device": GetDeviceActiveJobsDefaultResponseInnerDevice.from_dict(obj["device"]) if obj.get("device") is not None else None,
            "jobId": obj.get("jobId"),
            "jobStartTime": obj.get("jobStartTime"),
            "jobEndTime": obj.get("jobEndTime"),
            "jobStatus": obj.get("jobStatus"),
            "planGuid": obj.get("planGuid"),
            "planName": obj.get("planName"),
            "planType": obj.get("planType"),
            "totalActualStorageBytes": obj.get("totalActualStorageBytes"),
            "totalActualStorageFiles": obj.get("totalActualStorageFiles"),
            "actualBytesChecked": obj.get("actualBytesChecked"),
            "actualFilesChecked": obj.get("actualFilesChecked")
        })
        return _obj


