# coding: utf-8

"""
    NinjaOne Public API 2.0

    Ninja One Public API documentation. <br><br> See also: <br>  <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Device+Filter+Syntax.pdf\">Device Filter syntax</a><br> <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Webhooks.pdf\">Webhooks</a>

    The version of the OpenAPI document: 2.0.9-draft
    Contact: api@ninjarmm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GetRAIDControllerReportDefaultResponseResultsInner(BaseModel):
    """
    GetRAIDControllerReportDefaultResponseResultsInner
    """ # noqa: E501
    backup_battery_status: Optional[StrictStr] = Field(default=None, description="Backup Battery Status", alias="backupBatteryStatus")
    battery_temperature: Optional[StrictInt] = Field(default=None, description="Battery Temperature", alias="batteryTemperature")
    bios_version: Optional[StrictStr] = Field(default=None, description="BIOS Version", alias="biosVersion")
    cache_size: Optional[StrictInt] = Field(default=None, description="Cache size (bytes)", alias="cacheSize")
    controller_index: Optional[StrictInt] = Field(default=None, description="Controller Index", alias="controllerIndex")
    driver_name: Optional[StrictStr] = Field(default=None, description="Device Driver Name", alias="driverName")
    driver_version: Optional[StrictStr] = Field(default=None, description="Driver Version", alias="driverVersion")
    family: Optional[StrictStr] = Field(default=None, description="Family")
    firmware_version: Optional[StrictStr] = Field(default=None, description="Firmware Version", alias="firmwareVersion")
    hardware_revision: Optional[StrictStr] = Field(default=None, description="Hardware Revision", alias="hardwareRevision")
    manufacturer: Optional[StrictStr] = Field(default=None, description="Manufacturer")
    manufacturing_date: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Manufacturing date", alias="manufacturingDate")
    model: Optional[StrictStr] = Field(default=None, description="Model")
    physical_drive_count: Optional[StrictInt] = Field(default=None, description="Physical drive count", alias="physicalDriveCount")
    slot: Optional[StrictStr] = Field(default=None, description="Slot")
    system_health_status: Optional[StrictStr] = Field(default=None, description="System Health Status", alias="systemHealthStatus")
    virtual_drive_count: Optional[StrictInt] = Field(default=None, description="Virtual drive count", alias="virtualDriveCount")
    device_id: Optional[StrictInt] = Field(default=None, description="Device identifier", alias="deviceId")
    timestamp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Date/Time when data was collected/updated")
    __properties: ClassVar[List[str]] = ["backupBatteryStatus", "batteryTemperature", "biosVersion", "cacheSize", "controllerIndex", "driverName", "driverVersion", "family", "firmwareVersion", "hardwareRevision", "manufacturer", "manufacturingDate", "model", "physicalDriveCount", "slot", "systemHealthStatus", "virtualDriveCount", "deviceId", "timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetRAIDControllerReportDefaultResponseResultsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetRAIDControllerReportDefaultResponseResultsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backupBatteryStatus": obj.get("backupBatteryStatus"),
            "batteryTemperature": obj.get("batteryTemperature"),
            "biosVersion": obj.get("biosVersion"),
            "cacheSize": obj.get("cacheSize"),
            "controllerIndex": obj.get("controllerIndex"),
            "driverName": obj.get("driverName"),
            "driverVersion": obj.get("driverVersion"),
            "family": obj.get("family"),
            "firmwareVersion": obj.get("firmwareVersion"),
            "hardwareRevision": obj.get("hardwareRevision"),
            "manufacturer": obj.get("manufacturer"),
            "manufacturingDate": obj.get("manufacturingDate"),
            "model": obj.get("model"),
            "physicalDriveCount": obj.get("physicalDriveCount"),
            "slot": obj.get("slot"),
            "systemHealthStatus": obj.get("systemHealthStatus"),
            "virtualDriveCount": obj.get("virtualDriveCount"),
            "deviceId": obj.get("deviceId"),
            "timestamp": obj.get("timestamp")
        })
        return _obj


