# coding: utf-8

"""
NinjaOne Public API 2.0

NinjaOne Public API documentation.

The version of the OpenAPI document: 2.0.9-draft
Contact: api@ninjarmm.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional, Union
from tl_ninjarmm.models.maintenance import Maintenance
from tl_ninjarmm.models.node_references import NodeReferences
from tl_ninjarmm.models.note import Note
from typing import Set

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from tl_ninjarmm.models.agent_device import AgentDevice
    from tl_ninjarmm.models.cloud_monitor_dns import CloudMonitorDNS
    from tl_ninjarmm.models.cloud_monitor_email_server import CloudMonitorEmailServer
    from tl_ninjarmm.models.cloud_monitor_http import CloudMonitorHTTP
    from tl_ninjarmm.models.cloud_monitor_ping import CloudMonitorPing
    from tl_ninjarmm.models.cloud_monitor_port_scan import CloudMonitorPortScan
    from tl_ninjarmm.models.mdm_device import MdmDevice
    from tl_ninjarmm.models.nms_server import NMSServer
    from tl_ninjarmm.models.nms_target import NMSTarget
    from tl_ninjarmm.models.vm_guest import VMGuest
    from tl_ninjarmm.models.vm_host import VMHost


class Device(BaseModel):
    """
    Device
    """  # noqa: E501

    id: Optional[StrictInt] = Field(
        default=None, description="Node (Device) identifier"
    )
    parent_device_id: Optional[StrictInt] = Field(
        default=None, description="Parent Node identifier", alias="parentDeviceId"
    )
    organization_id: Optional[StrictInt] = Field(
        default=None, description="Organization identifier", alias="organizationId"
    )
    location_id: Optional[StrictInt] = Field(
        default=None, description="Location identifier", alias="locationId"
    )
    node_class: Optional[StrictStr] = Field(
        default=None, description="Node Class", alias="nodeClass"
    )
    node_role_id: Optional[StrictInt] = Field(
        default=None, description="Node Role identifier", alias="nodeRoleId"
    )
    role_policy_id: Optional[StrictInt] = Field(
        default=None,
        description="Node Role policy ID based on organization and location Policy Mapping",
        alias="rolePolicyId",
    )
    policy_id: Optional[StrictInt] = Field(
        default=None,
        description="Assigned policy ID (overrides organization and location policy mapping)",
        alias="policyId",
    )
    approval_status: Optional[StrictStr] = Field(
        default=None, description="Approval Status", alias="approvalStatus"
    )
    offline: Optional[StrictBool] = Field(default=None, description="Is Offline?")
    display_name: Optional[StrictStr] = Field(
        default=None, description="Display Name", alias="displayName"
    )
    system_name: Optional[StrictStr] = Field(
        default=None, description="System Name", alias="systemName"
    )
    dns_name: Optional[StrictStr] = Field(
        default=None, description="DNS Name", alias="dnsName"
    )
    netbios_name: Optional[StrictStr] = Field(
        default=None, description="NETBIOS Name", alias="netbiosName"
    )
    created: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Created"
    )
    last_contact: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Last Contact", alias="lastContact"
    )
    last_update: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Last data submission timestamp", alias="lastUpdate"
    )
    user_data: Optional[Dict[str, Any]] = Field(
        default=None, description="Custom attributes", alias="userData"
    )
    tags: Optional[List[StrictStr]] = Field(default=None, description="Tags")
    fields: Optional[Dict[str, Dict[str, Any]]] = Field(
        default=None, description="Custom Fields"
    )
    maintenance: Optional[Maintenance] = None
    references: Optional[NodeReferences] = None
    ip_addresses: Optional[List[StrictStr]] = Field(
        default=None, description="Device IP addresses", alias="ipAddresses"
    )
    mac_addresses: Optional[List[StrictStr]] = Field(
        default=None, description="Device MAC addresses", alias="macAddresses"
    )
    public_ip: Optional[StrictStr] = Field(
        default=None, description="Device Public IP Address", alias="publicIP"
    )
    notes: Optional[List[Note]] = Field(default=None, description="Device Notes")
    device_type: Optional[StrictStr] = Field(default=None, alias="deviceType")
    __properties: ClassVar[List[str]] = [
        "id",
        "parentDeviceId",
        "organizationId",
        "locationId",
        "nodeClass",
        "nodeRoleId",
        "rolePolicyId",
        "policyId",
        "approvalStatus",
        "offline",
        "displayName",
        "systemName",
        "dnsName",
        "netbiosName",
        "created",
        "lastContact",
        "lastUpdate",
        "userData",
        "tags",
        "fields",
        "maintenance",
        "references",
        "ipAddresses",
        "macAddresses",
        "publicIP",
        "notes",
        "deviceType",
    ]

    @field_validator("node_class")
    def node_class_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "WINDOWS_SERVER",
                "WINDOWS_WORKSTATION",
                "LINUX_WORKSTATION",
                "MAC",
                "ANDROID",
                "APPLE_IOS",
                "APPLE_IPADOS",
                "VMWARE_VM_HOST",
                "VMWARE_VM_GUEST",
                "HYPERV_VMM_HOST",
                "HYPERV_VMM_GUEST",
                "LINUX_SERVER",
                "MAC_SERVER",
                "CLOUD_MONITOR_TARGET",
                "NMS_SWITCH",
                "NMS_ROUTER",
                "NMS_FIREWALL",
                "NMS_PRIVATE_NETWORK_GATEWAY",
                "NMS_PRINTER",
                "NMS_SCANNER",
                "NMS_DIAL_MANAGER",
                "NMS_WAP",
                "NMS_IPSLA",
                "NMS_COMPUTER",
                "NMS_VM_HOST",
                "NMS_APPLIANCE",
                "NMS_OTHER",
                "NMS_SERVER",
                "NMS_PHONE",
                "NMS_VIRTUAL_MACHINE",
                "NMS_NETWORK_MANAGEMENT_AGENT",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('WINDOWS_SERVER', 'WINDOWS_WORKSTATION', 'LINUX_WORKSTATION', 'MAC', 'ANDROID', 'APPLE_IOS', 'APPLE_IPADOS', 'VMWARE_VM_HOST', 'VMWARE_VM_GUEST', 'HYPERV_VMM_HOST', 'HYPERV_VMM_GUEST', 'LINUX_SERVER', 'MAC_SERVER', 'CLOUD_MONITOR_TARGET', 'NMS_SWITCH', 'NMS_ROUTER', 'NMS_FIREWALL', 'NMS_PRIVATE_NETWORK_GATEWAY', 'NMS_PRINTER', 'NMS_SCANNER', 'NMS_DIAL_MANAGER', 'NMS_WAP', 'NMS_IPSLA', 'NMS_COMPUTER', 'NMS_VM_HOST', 'NMS_APPLIANCE', 'NMS_OTHER', 'NMS_SERVER', 'NMS_PHONE', 'NMS_VIRTUAL_MACHINE', 'NMS_NETWORK_MANAGEMENT_AGENT')"
            )
        return value

    @field_validator("approval_status")
    def approval_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["PENDING", "APPROVED"]):
            raise ValueError("must be one of enum values ('PENDING', 'APPROVED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = "deviceType"

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        "AgentDevice": "AgentDevice",
        "CloudMonitorDNS": "CloudMonitorDNS",
        "CloudMonitorEmailServer": "CloudMonitorEmailServer",
        "CloudMonitorHTTP": "CloudMonitorHTTP",
        "CloudMonitorPing": "CloudMonitorPing",
        "CloudMonitorPortScan": "CloudMonitorPortScan",
        "MdmDevice": "MdmDevice",
        "NMSServer": "NMSServer",
        "NMSTarget": "NMSTarget",
        "VMGuest": "VMGuest",
        "VMHost": "VMHost",
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> Optional[
        Union[
            AgentDevice,
            CloudMonitorDNS,
            CloudMonitorEmailServer,
            CloudMonitorHTTP,
            CloudMonitorPing,
            CloudMonitorPortScan,
            MdmDevice,
            NMSServer,
            NMSTarget,
            VMGuest,
            VMHost,
        ]
    ]:
        """Create an instance of Device from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of maintenance
        if self.maintenance:
            _dict["maintenance"] = self.maintenance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of references
        if self.references:
            _dict["references"] = self.references.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in notes (list)
        _items = []
        if self.notes:
            for _item_notes in self.notes:
                if _item_notes:
                    _items.append(_item_notes.to_dict())
            _dict["notes"] = _items
        return _dict

    @classmethod
    def from_dict(
        cls, obj: Dict[str, Any]
    ) -> Optional[
        Union[
            AgentDevice,
            CloudMonitorDNS,
            CloudMonitorEmailServer,
            CloudMonitorHTTP,
            CloudMonitorPing,
            CloudMonitorPortScan,
            MdmDevice,
            NMSServer,
            NMSTarget,
            VMGuest,
            VMHost,
        ]
    ]:
        """Create an instance of Device from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type == "AgentDevice":
            return import_module(
                "tl_ninjarmm.models.agent_device"
            ).AgentDevice.from_dict(obj)
        if object_type == "CloudMonitorDNS":
            return import_module(
                "tl_ninjarmm.models.cloud_monitor_dns"
            ).CloudMonitorDNS.from_dict(obj)
        if object_type == "CloudMonitorEmailServer":
            return import_module(
                "tl_ninjarmm.models.cloud_monitor_email_server"
            ).CloudMonitorEmailServer.from_dict(obj)
        if object_type == "CloudMonitorHTTP":
            return import_module(
                "tl_ninjarmm.models.cloud_monitor_http"
            ).CloudMonitorHTTP.from_dict(obj)
        if object_type == "CloudMonitorPing":
            return import_module(
                "tl_ninjarmm.models.cloud_monitor_ping"
            ).CloudMonitorPing.from_dict(obj)
        if object_type == "CloudMonitorPortScan":
            return import_module(
                "tl_ninjarmm.models.cloud_monitor_port_scan"
            ).CloudMonitorPortScan.from_dict(obj)
        if object_type == "MdmDevice":
            return import_module("tl_ninjarmm.models.mdm_device").MdmDevice.from_dict(
                obj
            )
        if object_type == "NMSServer":
            return import_module("tl_ninjarmm.models.nms_server").NMSServer.from_dict(
                obj
            )
        if object_type == "NMSTarget":
            return import_module("tl_ninjarmm.models.nms_target").NMSTarget.from_dict(
                obj
            )
        if object_type == "VMGuest":
            return import_module("tl_ninjarmm.models.vm_guest").VMGuest.from_dict(obj)
        if object_type == "VMHost":
            return import_module("tl_ninjarmm.models.vm_host").VMHost.from_dict(obj)

        raise ValueError(
            "Device failed to lookup discriminator value from "
            + json.dumps(obj)
            + ". Discriminator property name: "
            + cls.__discriminator_property_name
            + ", mapping: "
            + json.dumps(cls.__discriminator_value_class_map)
        )
