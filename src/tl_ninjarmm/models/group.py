# coding: utf-8

"""
NinjaOne Public API 2.0

NinjaOne Public API documentation.

The version of the OpenAPI document: 2.0.9-draft
Contact: api@ninjarmm.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
)
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Set
from typing_extensions import Self


class Group(BaseModel):
    """
    Group
    """  # noqa: E501

    id: Optional[StrictInt] = Field(default=None, description="Group identifier")
    name: Optional[StrictStr] = Field(default=None, description="Group Name")
    description: Optional[StrictStr] = Field(
        default=None, description="Group description"
    )
    shared: Optional[StrictBool] = Field(
        default=None, description="Group is shared with all users?"
    )
    created: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Timestamp of group creation"
    )
    updated: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Timestamp last update"
    )
    device_count: Optional[StrictInt] = Field(
        default=None,
        description="Estimated/Last known device count.  Can be `null` if group membership has not been evaluated recently",
        alias="deviceCount",
    )
    last_evaluated: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="Last evaluation time of group membership for nodes (search)",
        alias="lastEvaluated",
    )
    tags: Optional[List[StrictStr]] = Field(default=None, description="Tags")
    fields: Optional[Dict[str, Dict[str, Any]]] = Field(
        default=None, description="Custom Fields"
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "name",
        "description",
        "shared",
        "created",
        "updated",
        "deviceCount",
        "lastEvaluated",
        "tags",
        "fields",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Group from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Group from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "name": obj.get("name"),
                "description": obj.get("description"),
                "shared": obj.get("shared"),
                "created": obj.get("created"),
                "updated": obj.get("updated"),
                "deviceCount": obj.get("deviceCount"),
                "lastEvaluated": obj.get("lastEvaluated"),
                "tags": obj.get("tags"),
                "fields": obj.get("fields"),
            }
        )
        return _obj
