# coding: utf-8

"""
NinjaOne Public API 2.0

NinjaOne Public API documentation.

The version of the OpenAPI document: 2.0.9-draft
Contact: api@ninjarmm.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self


class User(BaseModel):
    """
    User
    """  # noqa: E501

    id: Optional[StrictInt] = Field(default=None, description="User identifier")
    first_name: Optional[StrictStr] = Field(default=None, alias="firstName")
    last_name: Optional[StrictStr] = Field(default=None, alias="lastName")
    email: Optional[StrictStr] = None
    phone: Optional[StrictStr] = None
    enabled: Optional[StrictBool] = None
    administrator: Optional[StrictBool] = None
    permit_all_clients: Optional[StrictBool] = Field(
        default=None, alias="permitAllClients"
    )
    notify_all_clients: Optional[StrictBool] = Field(
        default=None, alias="notifyAllClients"
    )
    must_change_pw: Optional[StrictBool] = Field(default=None, alias="mustChangePw")
    mfa_configured: Optional[StrictBool] = Field(default=None, alias="mfaConfigured")
    user_type: Optional[StrictStr] = Field(default=None, alias="userType")
    invitation_status: Optional[StrictStr] = Field(
        default=None, alias="invitationStatus"
    )
    organization_id: Optional[StrictInt] = Field(
        default=None,
        description="Identifier of organization for end-users",
        alias="organizationId",
    )
    device_ids: Optional[List[StrictInt]] = Field(
        default=None,
        description="Device IDs which end-user is authorized to access",
        alias="deviceIds",
    )
    tags: Optional[List[StrictStr]] = Field(default=None, description="Tags")
    fields: Optional[Dict[str, Dict[str, Any]]] = Field(
        default=None, description="Custom Fields"
    )
    roles: Optional[List[StrictStr]] = Field(
        default=None,
        description="A list of role names assigned to the user. This is provided when the 'includeRoles' query parameter is set to 'true'",
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "firstName",
        "lastName",
        "email",
        "phone",
        "enabled",
        "administrator",
        "permitAllClients",
        "notifyAllClients",
        "mustChangePw",
        "mfaConfigured",
        "userType",
        "invitationStatus",
        "organizationId",
        "deviceIds",
        "tags",
        "fields",
        "roles",
    ]

    @field_validator("user_type")
    def user_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["TECHNICIAN", "END_USER"]):
            raise ValueError("must be one of enum values ('TECHNICIAN', 'END_USER')")
        return value

    @field_validator("invitation_status")
    def invitation_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["REGISTERED", "PENDING", "EXPIRED"]):
            raise ValueError(
                "must be one of enum values ('REGISTERED', 'PENDING', 'EXPIRED')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "firstName": obj.get("firstName"),
                "lastName": obj.get("lastName"),
                "email": obj.get("email"),
                "phone": obj.get("phone"),
                "enabled": obj.get("enabled"),
                "administrator": obj.get("administrator"),
                "permitAllClients": obj.get("permitAllClients"),
                "notifyAllClients": obj.get("notifyAllClients"),
                "mustChangePw": obj.get("mustChangePw"),
                "mfaConfigured": obj.get("mfaConfigured"),
                "userType": obj.get("userType"),
                "invitationStatus": obj.get("invitationStatus"),
                "organizationId": obj.get("organizationId"),
                "deviceIds": obj.get("deviceIds"),
                "tags": obj.get("tags"),
                "fields": obj.get("fields"),
                "roles": obj.get("roles"),
            }
        )
        return _obj
