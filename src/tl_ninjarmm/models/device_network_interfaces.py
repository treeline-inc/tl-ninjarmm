# coding: utf-8

"""
    NinjaOne Public API 2.0

    Ninja One Public API documentation. <br><br> See also: <br>  <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Device+Filter+Syntax.pdf\">Device Filter syntax</a><br> <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Webhooks.pdf\">Webhooks</a>

    The version of the OpenAPI document: 2.0.9-draft
    Contact: api@ninjarmm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeviceNetworkInterfaces(BaseModel):
    """
    DeviceNetworkInterfaces
    """ # noqa: E501
    adapter_name: Optional[StrictStr] = Field(default=None, description="Adapter Name", alias="adapterName")
    default_gateway: Optional[StrictStr] = Field(default=None, description="Default Gateway", alias="defaultGateway")
    interface_type: Optional[StrictStr] = Field(default=None, description="Interface Type", alias="interfaceType")
    dns_host_name: Optional[StrictStr] = Field(default=None, description="DNS HostName", alias="dnsHostName")
    dns_servers: Optional[StrictStr] = Field(default=None, description="DNS Servers", alias="dnsServers")
    interface_index: Optional[StrictStr] = Field(default=None, description="Interface Index", alias="interfaceIndex")
    interface_name: Optional[StrictStr] = Field(default=None, description="Interface Name", alias="interfaceName")
    ip_address: Optional[List[StrictStr]] = Field(default=None, description="IP Address", alias="ipAddress")
    link_speed: Optional[StrictStr] = Field(default=None, description="Link Speed", alias="linkSpeed")
    mac_address: Optional[List[StrictStr]] = Field(default=None, description="MAC Address", alias="macAddress")
    mtu: Optional[StrictStr] = Field(default=None, description="MTU")
    status: Optional[StrictStr] = Field(default=None, description="Status")
    subnet_mask: Optional[StrictStr] = Field(default=None, description="Subnet Mask", alias="subnetMask")
    device_id: Optional[StrictInt] = Field(default=None, description="Device identifier", alias="deviceId")
    __properties: ClassVar[List[str]] = ["adapterName", "defaultGateway", "interfaceType", "dnsHostName", "dnsServers", "interfaceIndex", "interfaceName", "ipAddress", "linkSpeed", "macAddress", "mtu", "status", "subnetMask", "deviceId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceNetworkInterfaces from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceNetworkInterfaces from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adapterName": obj.get("adapterName"),
            "defaultGateway": obj.get("defaultGateway"),
            "interfaceType": obj.get("interfaceType"),
            "dnsHostName": obj.get("dnsHostName"),
            "dnsServers": obj.get("dnsServers"),
            "interfaceIndex": obj.get("interfaceIndex"),
            "interfaceName": obj.get("interfaceName"),
            "ipAddress": obj.get("ipAddress"),
            "linkSpeed": obj.get("linkSpeed"),
            "macAddress": obj.get("macAddress"),
            "mtu": obj.get("mtu"),
            "status": obj.get("status"),
            "subnetMask": obj.get("subnetMask"),
            "deviceId": obj.get("deviceId")
        })
        return _obj


