# coding: utf-8

"""
    NinjaOne Public API 2.0

    Ninja One Public API documentation. <br><br> See also: <br>  <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Device+Filter+Syntax.pdf\">Device Filter syntax</a><br> <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Webhooks.pdf\">Webhooks</a>

    The version of the OpenAPI document: 2.0.9-draft
    Contact: api@ninjarmm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from tl_ninjarmm.models.get_device_global_custom_fields_default_response_inner_content_end_user_customization import GetDeviceGlobalCustomFieldsDefaultResponseInnerContentEndUserCustomization
from tl_ninjarmm.models.get_device_global_custom_fields_default_response_inner_content_values_inner import GetDeviceGlobalCustomFieldsDefaultResponseInnerContentValuesInner
from tl_ninjarmm.models.get_document_templates_with_attributes200_response_inner_fields_inner_field_content_advanced_settings import GetDocumentTemplatesWithAttributes200ResponseInnerFieldsInnerFieldContentAdvancedSettings
from typing import Optional, Set
from typing_extensions import Self

class AttributeContent(BaseModel):
    """
    AttributeContent
    """ # noqa: E501
    customize_for_end_user: Optional[StrictBool] = Field(default=None, alias="customizeForEndUser")
    end_user_customization: Optional[GetDeviceGlobalCustomFieldsDefaultResponseInnerContentEndUserCustomization] = Field(default=None, alias="endUserCustomization")
    values: Optional[List[GetDeviceGlobalCustomFieldsDefaultResponseInnerContentValuesInner]] = None
    required: Optional[StrictBool] = None
    footer_text: Optional[StrictStr] = Field(default=None, alias="footerText")
    tooltip_text: Optional[StrictStr] = Field(default=None, alias="tooltipText")
    advanced_settings: Optional[GetDocumentTemplatesWithAttributes200ResponseInnerFieldsInnerFieldContentAdvancedSettings] = Field(default=None, alias="advancedSettings")
    __properties: ClassVar[List[str]] = ["customizeForEndUser", "endUserCustomization", "values", "required", "footerText", "tooltipText", "advancedSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AttributeContent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of end_user_customization
        if self.end_user_customization:
            _dict['endUserCustomization'] = self.end_user_customization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in values (list)
        _items = []
        if self.values:
            for _item_values in self.values:
                if _item_values:
                    _items.append(_item_values.to_dict())
            _dict['values'] = _items
        # override the default output from pydantic by calling `to_dict()` of advanced_settings
        if self.advanced_settings:
            _dict['advancedSettings'] = self.advanced_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AttributeContent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customizeForEndUser": obj.get("customizeForEndUser"),
            "endUserCustomization": GetDeviceGlobalCustomFieldsDefaultResponseInnerContentEndUserCustomization.from_dict(obj["endUserCustomization"]) if obj.get("endUserCustomization") is not None else None,
            "values": [GetDeviceGlobalCustomFieldsDefaultResponseInnerContentValuesInner.from_dict(_item) for _item in obj["values"]] if obj.get("values") is not None else None,
            "required": obj.get("required"),
            "footerText": obj.get("footerText"),
            "tooltipText": obj.get("tooltipText"),
            "advancedSettings": GetDocumentTemplatesWithAttributes200ResponseInnerFieldsInnerFieldContentAdvancedSettings.from_dict(obj["advancedSettings"]) if obj.get("advancedSettings") is not None else None
        })
        return _obj


