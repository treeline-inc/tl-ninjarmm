# coding: utf-8

"""
    NinjaOne Public API 2.0

    Ninja One Public API documentation. <br><br> See also: <br>  <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Device+Filter+Syntax.pdf\">Device Filter syntax</a><br> <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Webhooks.pdf\">Webhooks</a>

    The version of the OpenAPI document: 2.0.9-draft
    Contact: api@ninjarmm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class DeviceRAIDDrive(BaseModel):
    """
    DeviceRAIDDrive
    """ # noqa: E501
    controller_index: Optional[StrictInt] = Field(default=None, description="Controller index", alias="controllerIndex")
    drive_group: Optional[StrictStr] = Field(default=None, description="Drive Group", alias="driveGroup")
    drive_id: Optional[StrictStr] = Field(default=None, description="Drive Identifier", alias="driveId")
    interface_type: Optional[StrictStr] = Field(default=None, description="Interface type", alias="interfaceType")
    location: Optional[StrictStr] = Field(default=None, description="Location")
    media_type: Optional[StrictStr] = Field(default=None, description="Media type", alias="mediaType")
    model: Optional[StrictStr] = Field(default=None, description="Model")
    protection_info: Optional[StrictStr] = Field(default=None, description="Protection Information", alias="protectionInfo")
    self_encrypted: Optional[StrictBool] = Field(default=None, description="Is self encrypted?", alias="selfEncrypted")
    serial: Optional[StrictStr] = Field(default=None, description="Serial number")
    size: Optional[StrictInt] = Field(default=None, description="Size (bytes)")
    spun: Optional[StrictBool] = Field(default=None, description="Spun?")
    status: Optional[StrictStr] = Field(default=None, description="Status")
    device_id: Optional[StrictInt] = Field(default=None, description="Device identifier", alias="deviceId")
    timestamp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Date/Time when data was collected/updated")
    __properties: ClassVar[List[str]] = ["controllerIndex", "driveGroup", "driveId", "interfaceType", "location", "mediaType", "model", "protectionInfo", "selfEncrypted", "serial", "size", "spun", "status", "deviceId", "timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceRAIDDrive from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceRAIDDrive from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "controllerIndex": obj.get("controllerIndex"),
            "driveGroup": obj.get("driveGroup"),
            "driveId": obj.get("driveId"),
            "interfaceType": obj.get("interfaceType"),
            "location": obj.get("location"),
            "mediaType": obj.get("mediaType"),
            "model": obj.get("model"),
            "protectionInfo": obj.get("protectionInfo"),
            "selfEncrypted": obj.get("selfEncrypted"),
            "serial": obj.get("serial"),
            "size": obj.get("size"),
            "spun": obj.get("spun"),
            "status": obj.get("status"),
            "deviceId": obj.get("deviceId"),
            "timestamp": obj.get("timestamp")
        })
        return _obj


