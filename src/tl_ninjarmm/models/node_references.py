# coding: utf-8

"""
NinjaOne Public API 2.0

NinjaOne Public API documentation.

The version of the OpenAPI document: 2.0.9-draft
Contact: api@ninjarmm.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from tl_ninjarmm.models.backup_usage import BackupUsage
from tl_ninjarmm.models.location import Location
from tl_ninjarmm.models.node_role import NodeRole
from tl_ninjarmm.models.organization import Organization
from tl_ninjarmm.models.policy import Policy
from tl_ninjarmm.models.user import User
from tl_ninjarmm.models.warranty_dates import WarrantyDates
from typing import Set
from typing_extensions import Self


class NodeReferences(BaseModel):
    """
    Expanded entity references
    """  # noqa: E501

    organization: Optional[Organization] = None
    location: Optional[Location] = None
    role_policy: Optional[Policy] = Field(default=None, alias="rolePolicy")
    policy: Optional[Policy] = None
    role: Optional[NodeRole] = None
    backup_usage: Optional[BackupUsage] = Field(default=None, alias="backupUsage")
    warranty: Optional[WarrantyDates] = None
    assigned_owner: Optional[User] = Field(default=None, alias="assignedOwner")
    __properties: ClassVar[List[str]] = [
        "organization",
        "location",
        "rolePolicy",
        "policy",
        "role",
        "backupUsage",
        "warranty",
        "assignedOwner",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NodeReferences from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict["organization"] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict["location"] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of role_policy
        if self.role_policy:
            _dict["rolePolicy"] = self.role_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policy
        if self.policy:
            _dict["policy"] = self.policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of role
        if self.role:
            _dict["role"] = self.role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of backup_usage
        if self.backup_usage:
            _dict["backupUsage"] = self.backup_usage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of warranty
        if self.warranty:
            _dict["warranty"] = self.warranty.to_dict()
        # override the default output from pydantic by calling `to_dict()` of assigned_owner
        if self.assigned_owner:
            _dict["assignedOwner"] = self.assigned_owner.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NodeReferences from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "organization": Organization.from_dict(obj["organization"])
                if obj.get("organization") is not None
                else None,
                "location": Location.from_dict(obj["location"])
                if obj.get("location") is not None
                else None,
                "rolePolicy": Policy.from_dict(obj["rolePolicy"])
                if obj.get("rolePolicy") is not None
                else None,
                "policy": Policy.from_dict(obj["policy"])
                if obj.get("policy") is not None
                else None,
                "role": NodeRole.from_dict(obj["role"])
                if obj.get("role") is not None
                else None,
                "backupUsage": BackupUsage.from_dict(obj["backupUsage"])
                if obj.get("backupUsage") is not None
                else None,
                "warranty": WarrantyDates.from_dict(obj["warranty"])
                if obj.get("warranty") is not None
                else None,
                "assignedOwner": User.from_dict(obj["assignedOwner"])
                if obj.get("assignedOwner") is not None
                else None,
            }
        )
        return _obj
