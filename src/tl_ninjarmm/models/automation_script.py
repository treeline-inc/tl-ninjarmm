# coding: utf-8

"""
NinjaOne Public API 2.0

NinjaOne Public API documentation.

The version of the OpenAPI document: 2.0.9-draft
Contact: api@ninjarmm.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
)
from typing import Any, ClassVar, Dict, List, Optional, Union
from tl_ninjarmm.models.script_variable import ScriptVariable
from typing import Set
from typing_extensions import Self


class AutomationScript(BaseModel):
    """
    AutomationScript
    """  # noqa: E501

    id: Optional[StrictInt] = Field(default=None, description="Script ID")
    name: Optional[StrictStr] = Field(default=None, description="Script Name")
    description: Optional[StrictStr] = Field(
        default=None, description="Script Description"
    )
    active: Optional[StrictBool] = Field(default=None, description="Script is Active")
    language: Optional[StrictStr] = Field(default=None, description="Script Language")
    architecture: Optional[List[StrictStr]] = Field(
        default=None, description="Applicable Architectures"
    )
    operating_systems: Optional[List[StrictStr]] = Field(
        default=None,
        description="Applicable Operating Systems",
        alias="operatingSystems",
    )
    script_parameters: Optional[List[StrictStr]] = Field(
        default=None, description="Script Parameters", alias="scriptParameters"
    )
    script_variables: Optional[List[ScriptVariable]] = Field(
        default=None, description="Script Variables", alias="scriptVariables"
    )
    created_by: Optional[StrictStr] = Field(
        default=None, description="Script Created By", alias="createdBy"
    )
    last_updated_by: Optional[StrictStr] = Field(
        default=None, description="Script Last Updated By", alias="lastUpdatedBy"
    )
    created_on: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Script date of creation", alias="createdOn"
    )
    updated_on: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Script last updated date", alias="updatedOn"
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "name",
        "description",
        "active",
        "language",
        "architecture",
        "operatingSystems",
        "scriptParameters",
        "scriptVariables",
        "createdBy",
        "lastUpdatedBy",
        "createdOn",
        "updatedOn",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AutomationScript from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in script_variables (list)
        _items = []
        if self.script_variables:
            for _item_script_variables in self.script_variables:
                if _item_script_variables:
                    _items.append(_item_script_variables.to_dict())
            _dict["scriptVariables"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AutomationScript from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "name": obj.get("name"),
                "description": obj.get("description"),
                "active": obj.get("active"),
                "language": obj.get("language"),
                "architecture": obj.get("architecture"),
                "operatingSystems": obj.get("operatingSystems"),
                "scriptParameters": obj.get("scriptParameters"),
                "scriptVariables": [
                    ScriptVariable.from_dict(_item) for _item in obj["scriptVariables"]
                ]
                if obj.get("scriptVariables") is not None
                else None,
                "createdBy": obj.get("createdBy"),
                "lastUpdatedBy": obj.get("lastUpdatedBy"),
                "createdOn": obj.get("createdOn"),
                "updatedOn": obj.get("updatedOn"),
            }
        )
        return _obj
