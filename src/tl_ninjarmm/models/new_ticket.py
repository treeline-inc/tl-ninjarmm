# coding: utf-8

"""
    NinjaOne Public API 2.0

    Ninja One Public API documentation. <br><br> See also: <br>  <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Device+Filter+Syntax.pdf\">Device Filter syntax</a><br> <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Webhooks.pdf\">Webhooks</a>

    The version of the OpenAPI document: 2.0.9-draft
    Contact: api@ninjarmm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from tl_ninjarmm.models.create_request_attributes_inner import CreateRequestAttributesInner
from tl_ninjarmm.models.create_request_cc import CreateRequestCc
from tl_ninjarmm.models.create_request_description import CreateRequestDescription
from typing import Optional, Set
from typing_extensions import Self

class NewTicket(BaseModel):
    """
    NewTicket
    """ # noqa: E501
    client_id: StrictInt = Field(description="Client (Organization) identifier", alias="clientId")
    ticket_form_id: StrictInt = Field(description="Ticket form identifier", alias="ticketFormId")
    location_id: Optional[StrictInt] = Field(default=None, description="Location identifier", alias="locationId")
    node_id: Optional[StrictInt] = Field(default=None, description="Device identifier", alias="nodeId")
    subject: Annotated[str, Field(min_length=0, strict=True, max_length=200)]
    description: Optional[CreateRequestDescription] = None
    status: StrictStr
    type: Optional[StrictStr] = Field(default=None, description="Type of ticket")
    cc: Optional[CreateRequestCc] = None
    assigned_app_user_id: Optional[StrictInt] = Field(default=None, alias="assignedAppUserId")
    requester_uid: Optional[StrictStr] = Field(default=None, alias="requesterUid")
    severity: Optional[StrictStr] = 'NONE'
    priority: Optional[StrictStr] = 'NONE'
    parent_ticket_id: Optional[StrictInt] = Field(default=None, description="Ticket parent identifier", alias="parentTicketId")
    tags: Optional[List[Optional[StrictStr]]] = None
    attributes: Optional[List[Optional[CreateRequestAttributesInner]]] = None
    __properties: ClassVar[List[str]] = ["clientId", "ticketFormId", "locationId", "nodeId", "subject", "description", "status", "type", "cc", "assignedAppUserId", "requesterUid", "severity", "priority", "parentTicketId", "tags", "attributes"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROBLEM', 'QUESTION', 'INCIDENT', 'TASK']):
            raise ValueError("must be one of enum values ('PROBLEM', 'QUESTION', 'INCIDENT', 'TASK')")
        return value

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE', 'MINOR', 'MODERATE', 'MAJOR', 'CRITICAL']):
            raise ValueError("must be one of enum values ('NONE', 'MINOR', 'MODERATE', 'MAJOR', 'CRITICAL')")
        return value

    @field_validator('priority')
    def priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE', 'LOW', 'MEDIUM', 'HIGH']):
            raise ValueError("must be one of enum values ('NONE', 'LOW', 'MEDIUM', 'HIGH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NewTicket from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cc
        if self.cc:
            _dict['cc'] = self.cc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item_attributes in self.attributes:
                if _item_attributes:
                    _items.append(_item_attributes.to_dict())
            _dict['attributes'] = _items
        # set to None if location_id (nullable) is None
        # and model_fields_set contains the field
        if self.location_id is None and "location_id" in self.model_fields_set:
            _dict['locationId'] = None

        # set to None if node_id (nullable) is None
        # and model_fields_set contains the field
        if self.node_id is None and "node_id" in self.model_fields_set:
            _dict['nodeId'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if cc (nullable) is None
        # and model_fields_set contains the field
        if self.cc is None and "cc" in self.model_fields_set:
            _dict['cc'] = None

        # set to None if assigned_app_user_id (nullable) is None
        # and model_fields_set contains the field
        if self.assigned_app_user_id is None and "assigned_app_user_id" in self.model_fields_set:
            _dict['assignedAppUserId'] = None

        # set to None if severity (nullable) is None
        # and model_fields_set contains the field
        if self.severity is None and "severity" in self.model_fields_set:
            _dict['severity'] = None

        # set to None if priority (nullable) is None
        # and model_fields_set contains the field
        if self.priority is None and "priority" in self.model_fields_set:
            _dict['priority'] = None

        # set to None if parent_ticket_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_ticket_id is None and "parent_ticket_id" in self.model_fields_set:
            _dict['parentTicketId'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if attributes (nullable) is None
        # and model_fields_set contains the field
        if self.attributes is None and "attributes" in self.model_fields_set:
            _dict['attributes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NewTicket from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientId": obj.get("clientId"),
            "ticketFormId": obj.get("ticketFormId"),
            "locationId": obj.get("locationId"),
            "nodeId": obj.get("nodeId"),
            "subject": obj.get("subject"),
            "description": CreateRequestDescription.from_dict(obj["description"]) if obj.get("description") is not None else None,
            "status": obj.get("status") if obj.get("status") is not None else '1000',
            "type": obj.get("type"),
            "cc": CreateRequestCc.from_dict(obj["cc"]) if obj.get("cc") is not None else None,
            "assignedAppUserId": obj.get("assignedAppUserId"),
            "requesterUid": obj.get("requesterUid"),
            "severity": obj.get("severity") if obj.get("severity") is not None else 'NONE',
            "priority": obj.get("priority") if obj.get("priority") is not None else 'NONE',
            "parentTicketId": obj.get("parentTicketId"),
            "tags": obj.get("tags"),
            "attributes": [CreateRequestAttributesInner.from_dict(_item) for _item in obj["attributes"]] if obj.get("attributes") is not None else None
        })
        return _obj


