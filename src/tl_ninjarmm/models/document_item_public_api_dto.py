# coding: utf-8

"""
    NinjaOne Public API 2.0

    Ninja One Public API documentation. <br><br> See also: <br>  <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Device+Filter+Syntax.pdf\">Device Filter syntax</a><br> <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Webhooks.pdf\">Webhooks</a>

    The version of the OpenAPI document: 2.0.9-draft
    Contact: api@ninjarmm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from tl_ninjarmm.models.get_document_templates_with_attributes200_response_inner_fields_inner_field_content import GetDocumentTemplatesWithAttributes200ResponseInnerFieldsInnerFieldContent
from typing import Optional, Set
from typing_extensions import Self

class DocumentItemPublicApiDTO(BaseModel):
    """
    Document template fields
    """ # noqa: E501
    field_id: Optional[StrictInt] = Field(default=None, description="Field identifier", alias="fieldId")
    field_label: Optional[StrictStr] = Field(default=None, description="Field or UI element name", alias="fieldLabel")
    field_name: Optional[StrictStr] = Field(default=None, description="Field name", alias="fieldName")
    field_description: Optional[StrictStr] = Field(default=None, description="Field description", alias="fieldDescription")
    field_type: Optional[StrictStr] = Field(default=None, description="Field type", alias="fieldType")
    field_technician_permission: Optional[StrictStr] = Field(default=None, description="Field technician permission", alias="fieldTechnicianPermission")
    field_script_permission: Optional[StrictStr] = Field(default=None, description="Field script permission", alias="fieldScriptPermission")
    field_api_permission: Optional[StrictStr] = Field(default=None, description="Field public API permission", alias="fieldApiPermission")
    field_default_value: Optional[StrictStr] = Field(default=None, description="Default value", alias="fieldDefaultValue")
    field_content: Optional[GetDocumentTemplatesWithAttributes200ResponseInnerFieldsInnerFieldContent] = Field(default=None, alias="fieldContent")
    ui_element_uid: Optional[StrictStr] = Field(default=None, description="UI element identifier", alias="uiElementUid")
    ui_element_name: Optional[StrictStr] = Field(default=None, description="UI element name", alias="uiElementName")
    ui_element_type: Optional[StrictStr] = Field(default=None, description="UI element type", alias="uiElementType")
    ui_element_value: Optional[StrictStr] = Field(default=None, description="UI element value", alias="uiElementValue")
    created_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Creation time", alias="createdTime")
    updated_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Last updated time", alias="updatedTime")
    __properties: ClassVar[List[str]] = ["fieldId", "fieldLabel", "fieldName", "fieldDescription", "fieldType", "fieldTechnicianPermission", "fieldScriptPermission", "fieldApiPermission", "fieldDefaultValue", "fieldContent", "uiElementUid", "uiElementName", "uiElementType", "uiElementValue", "createdTime", "updatedTime"]

    @field_validator('field_type')
    def field_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DROPDOWN', 'MULTI_SELECT', 'CHECKBOX', 'TEXT', 'TEXT_MULTILINE', 'TEXT_ENCRYPTED', 'NUMERIC', 'DECIMAL', 'DATE', 'DATE_TIME', 'TIME', 'ATTACHMENT', 'NODE_DROPDOWN', 'NODE_MULTI_SELECT', 'CLIENT_DROPDOWN', 'CLIENT_MULTI_SELECT', 'CLIENT_LOCATION_DROPDOWN', 'CLIENT_LOCATION_MULTI_SELECT', 'CLIENT_DOCUMENT_DROPDOWN', 'CLIENT_DOCUMENT_MULTI_SELECT', 'EMAIL', 'PHONE', 'IP_ADDRESS', 'WYSIWYG', 'URL']):
            raise ValueError("must be one of enum values ('DROPDOWN', 'MULTI_SELECT', 'CHECKBOX', 'TEXT', 'TEXT_MULTILINE', 'TEXT_ENCRYPTED', 'NUMERIC', 'DECIMAL', 'DATE', 'DATE_TIME', 'TIME', 'ATTACHMENT', 'NODE_DROPDOWN', 'NODE_MULTI_SELECT', 'CLIENT_DROPDOWN', 'CLIENT_MULTI_SELECT', 'CLIENT_LOCATION_DROPDOWN', 'CLIENT_LOCATION_MULTI_SELECT', 'CLIENT_DOCUMENT_DROPDOWN', 'CLIENT_DOCUMENT_MULTI_SELECT', 'EMAIL', 'PHONE', 'IP_ADDRESS', 'WYSIWYG', 'URL')")
        return value

    @field_validator('field_technician_permission')
    def field_technician_permission_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE', 'EDITABLE', 'READ_ONLY']):
            raise ValueError("must be one of enum values ('NONE', 'EDITABLE', 'READ_ONLY')")
        return value

    @field_validator('field_script_permission')
    def field_script_permission_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE', 'READ_ONLY', 'WRITE_ONLY', 'READ_WRITE']):
            raise ValueError("must be one of enum values ('NONE', 'READ_ONLY', 'WRITE_ONLY', 'READ_WRITE')")
        return value

    @field_validator('field_api_permission')
    def field_api_permission_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE', 'READ_ONLY', 'WRITE_ONLY', 'READ_WRITE']):
            raise ValueError("must be one of enum values ('NONE', 'READ_ONLY', 'WRITE_ONLY', 'READ_WRITE')")
        return value

    @field_validator('ui_element_type')
    def ui_element_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TITLE', 'DESCRIPTION', 'SEPARATOR']):
            raise ValueError("must be one of enum values ('TITLE', 'DESCRIPTION', 'SEPARATOR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentItemPublicApiDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of field_content
        if self.field_content:
            _dict['fieldContent'] = self.field_content.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentItemPublicApiDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fieldId": obj.get("fieldId"),
            "fieldLabel": obj.get("fieldLabel"),
            "fieldName": obj.get("fieldName"),
            "fieldDescription": obj.get("fieldDescription"),
            "fieldType": obj.get("fieldType"),
            "fieldTechnicianPermission": obj.get("fieldTechnicianPermission"),
            "fieldScriptPermission": obj.get("fieldScriptPermission"),
            "fieldApiPermission": obj.get("fieldApiPermission"),
            "fieldDefaultValue": obj.get("fieldDefaultValue"),
            "fieldContent": GetDocumentTemplatesWithAttributes200ResponseInnerFieldsInnerFieldContent.from_dict(obj["fieldContent"]) if obj.get("fieldContent") is not None else None,
            "uiElementUid": obj.get("uiElementUid"),
            "uiElementName": obj.get("uiElementName"),
            "uiElementType": obj.get("uiElementType"),
            "uiElementValue": obj.get("uiElementValue"),
            "createdTime": obj.get("createdTime"),
            "updatedTime": obj.get("updatedTime")
        })
        return _obj


