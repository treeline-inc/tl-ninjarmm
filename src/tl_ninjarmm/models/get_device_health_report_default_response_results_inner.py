# coding: utf-8

"""
    NinjaOne Public API 2.0

    Ninja One Public API documentation. <br><br> See also: <br>  <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Device+Filter+Syntax.pdf\">Device Filter syntax</a><br> <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Webhooks.pdf\">Webhooks</a>

    The version of the OpenAPI document: 2.0.9-draft
    Contact: api@ninjarmm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetDeviceHealthReportDefaultResponseResultsInner(BaseModel):
    """
    GetDeviceHealthReportDefaultResponseResultsInner
    """ # noqa: E501
    active_threats_count: Optional[StrictInt] = Field(default=None, description="Active AV threats count", alias="activeThreatsCount")
    quarantined_threats_count: Optional[StrictInt] = Field(default=None, description="Quarantined AV threats count", alias="quarantinedThreatsCount")
    blocked_threats_count: Optional[StrictInt] = Field(default=None, description="Blocked AV threats count", alias="blockedThreatsCount")
    failed_os_patches_count: Optional[StrictInt] = Field(default=None, description="Number of failed OS patches", alias="failedOSPatchesCount")
    pending_os_patches_count: Optional[StrictInt] = Field(default=None, description="Number of pending OS patches", alias="pendingOSPatchesCount")
    alert_count: Optional[StrictInt] = Field(default=None, description="Alerts count", alias="alertCount")
    active_job_count: Optional[StrictInt] = Field(default=None, description="Alerts job count", alias="activeJobCount")
    failed_software_patches_count: Optional[StrictInt] = Field(default=None, description="Number of failed software patches", alias="failedSoftwarePatchesCount")
    pending_software_patches_count: Optional[StrictInt] = Field(default=None, description="Number of pending software patches", alias="pendingSoftwarePatchesCount")
    pending_reboot_reason: Optional[StrictStr] = Field(default=None, description="Pending reboot reasons", alias="pendingRebootReason")
    av_install_status: Optional[StrictStr] = Field(default=None, description="Antivirus installation status", alias="avInstallStatus")
    products_installation_statuses: Optional[Dict[str, StrictStr]] = Field(default=None, description="Integrated products' installation statuses", alias="productsInstallationStatuses")
    offline: Optional[StrictBool] = Field(default=None, description="Is device offline?")
    parent_device_id: Optional[StrictInt] = Field(default=None, description="Parent device identifier", alias="parentDeviceId")
    parent_offline: Optional[StrictBool] = Field(default=None, description="Is parent device offline", alias="parentOffline")
    health_status: Optional[StrictStr] = Field(default=None, description="Health status", alias="healthStatus")
    installation_issues_count: Optional[StrictInt] = Field(default=None, alias="installationIssuesCount")
    device_id: Optional[StrictInt] = Field(default=None, description="Device identifier", alias="deviceId")
    __properties: ClassVar[List[str]] = ["activeThreatsCount", "quarantinedThreatsCount", "blockedThreatsCount", "failedOSPatchesCount", "pendingOSPatchesCount", "alertCount", "activeJobCount", "failedSoftwarePatchesCount", "pendingSoftwarePatchesCount", "pendingRebootReason", "avInstallStatus", "productsInstallationStatuses", "offline", "parentDeviceId", "parentOffline", "healthStatus", "installationIssuesCount", "deviceId"]

    @field_validator('av_install_status')
    def av_install_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REQUESTED', 'DOWNLOAD_STARTED', 'DOWNLOADED', 'DOWNLOAD_FAILED', 'INSTALL_STARTED', 'INSTALLED', 'INSTALL_FAILED', 'UNINSTALL_REQUESTED', 'UNINSTALL_FAILED', 'UNINSTALLED']):
            raise ValueError("must be one of enum values ('REQUESTED', 'DOWNLOAD_STARTED', 'DOWNLOADED', 'DOWNLOAD_FAILED', 'INSTALL_STARTED', 'INSTALLED', 'INSTALL_FAILED', 'UNINSTALL_REQUESTED', 'UNINSTALL_FAILED', 'UNINSTALLED')")
        return value

    @field_validator('products_installation_statuses')
    def products_installation_statuses_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value.values():
            if i not in set(['REQUESTED', 'DOWNLOAD_STARTED', 'DOWNLOADED', 'DOWNLOAD_FAILED', 'INSTALL_STARTED', 'INSTALLED', 'INSTALL_FAILED', 'UNINSTALL_REQUESTED', 'UNINSTALL_FAILED', 'UNINSTALLED']):
                raise ValueError("dict values must be one of enum values ('REQUESTED', 'DOWNLOAD_STARTED', 'DOWNLOADED', 'DOWNLOAD_FAILED', 'INSTALL_STARTED', 'INSTALLED', 'INSTALL_FAILED', 'UNINSTALL_REQUESTED', 'UNINSTALL_FAILED', 'UNINSTALLED')")
        return value

    @field_validator('health_status')
    def health_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'HEALTHY', 'NEEDS_ATTENTION', 'UNHEALTHY']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'HEALTHY', 'NEEDS_ATTENTION', 'UNHEALTHY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetDeviceHealthReportDefaultResponseResultsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetDeviceHealthReportDefaultResponseResultsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeThreatsCount": obj.get("activeThreatsCount"),
            "quarantinedThreatsCount": obj.get("quarantinedThreatsCount"),
            "blockedThreatsCount": obj.get("blockedThreatsCount"),
            "failedOSPatchesCount": obj.get("failedOSPatchesCount"),
            "pendingOSPatchesCount": obj.get("pendingOSPatchesCount"),
            "alertCount": obj.get("alertCount"),
            "activeJobCount": obj.get("activeJobCount"),
            "failedSoftwarePatchesCount": obj.get("failedSoftwarePatchesCount"),
            "pendingSoftwarePatchesCount": obj.get("pendingSoftwarePatchesCount"),
            "pendingRebootReason": obj.get("pendingRebootReason"),
            "avInstallStatus": obj.get("avInstallStatus"),
            "productsInstallationStatuses": obj.get("productsInstallationStatuses"),
            "offline": obj.get("offline"),
            "parentDeviceId": obj.get("parentDeviceId"),
            "parentOffline": obj.get("parentOffline"),
            "healthStatus": obj.get("healthStatus"),
            "installationIssuesCount": obj.get("installationIssuesCount"),
            "deviceId": obj.get("deviceId")
        })
        return _obj


