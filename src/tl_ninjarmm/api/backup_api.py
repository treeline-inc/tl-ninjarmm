# coding: utf-8

"""
    NinjaOne Public API 2.0

    Ninja One Public API documentation. <br><br> See also: <br>  <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Device+Filter+Syntax.pdf\">Device Filter syntax</a><br> <a href=\"https://resources.ninjarmm.com/API/Ninja+RMM+Public+API+v2.0.5+Webhooks.pdf\">Webhooks</a>

    The version of the OpenAPI document: 2.0.9-draft
    Contact: api@ninjarmm.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from tl_ninjarmm.models.get_integrity_check_jobs200_response import GetIntegrityCheckJobs200Response
from tl_ninjarmm.models.submit_integrity_check_job200_response import SubmitIntegrityCheckJob200Response
from tl_ninjarmm.models.submit_integrity_check_job_request import SubmitIntegrityCheckJobRequest

from tl_ninjarmm.api_client import ApiClient, RequestSerialized
from tl_ninjarmm.api_response import ApiResponse
from tl_ninjarmm.rest import RESTResponseType


class BackupApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_backup_jobs(
        self,
        df: Annotated[Optional[StrictStr], Field(description="Device filter")] = None,
        ddf: Annotated[Optional[StrictStr], Field(description="Deleted device filter")] = None,
        sf: Annotated[Optional[StrictStr], Field(description="Backup job status filter")] = None,
        ptf: Annotated[Optional[StrictStr], Field(description="Backup job planType filter")] = None,
        stf: Annotated[Optional[StrictStr], Field(description="Backup job startTime filter")] = None,
        include: Annotated[Optional[StrictStr], Field(description="Which devices include (active|deleted|all) default value active")] = None,
        cursor: Annotated[Optional[StrictStr], Field(description="Cursor name")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=10000, strict=True, ge=1)]], Field(description="Limit number of records per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetIntegrityCheckJobs200Response:
        """Backup jobs

        Returns list of backup jobs

        :param df: Device filter
        :type df: str
        :param ddf: Deleted device filter
        :type ddf: str
        :param sf: Backup job status filter
        :type sf: str
        :param ptf: Backup job planType filter
        :type ptf: str
        :param stf: Backup job startTime filter
        :type stf: str
        :param include: Which devices include (active|deleted|all) default value active
        :type include: str
        :param cursor: Cursor name
        :type cursor: str
        :param page_size: Limit number of records per page
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_backup_jobs_serialize(
            df=df,
            ddf=ddf,
            sf=sf,
            ptf=ptf,
            stf=stf,
            include=include,
            cursor=cursor,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetIntegrityCheckJobs200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_backup_jobs_with_http_info(
        self,
        df: Annotated[Optional[StrictStr], Field(description="Device filter")] = None,
        ddf: Annotated[Optional[StrictStr], Field(description="Deleted device filter")] = None,
        sf: Annotated[Optional[StrictStr], Field(description="Backup job status filter")] = None,
        ptf: Annotated[Optional[StrictStr], Field(description="Backup job planType filter")] = None,
        stf: Annotated[Optional[StrictStr], Field(description="Backup job startTime filter")] = None,
        include: Annotated[Optional[StrictStr], Field(description="Which devices include (active|deleted|all) default value active")] = None,
        cursor: Annotated[Optional[StrictStr], Field(description="Cursor name")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=10000, strict=True, ge=1)]], Field(description="Limit number of records per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetIntegrityCheckJobs200Response]:
        """Backup jobs

        Returns list of backup jobs

        :param df: Device filter
        :type df: str
        :param ddf: Deleted device filter
        :type ddf: str
        :param sf: Backup job status filter
        :type sf: str
        :param ptf: Backup job planType filter
        :type ptf: str
        :param stf: Backup job startTime filter
        :type stf: str
        :param include: Which devices include (active|deleted|all) default value active
        :type include: str
        :param cursor: Cursor name
        :type cursor: str
        :param page_size: Limit number of records per page
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_backup_jobs_serialize(
            df=df,
            ddf=ddf,
            sf=sf,
            ptf=ptf,
            stf=stf,
            include=include,
            cursor=cursor,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetIntegrityCheckJobs200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_backup_jobs_without_preload_content(
        self,
        df: Annotated[Optional[StrictStr], Field(description="Device filter")] = None,
        ddf: Annotated[Optional[StrictStr], Field(description="Deleted device filter")] = None,
        sf: Annotated[Optional[StrictStr], Field(description="Backup job status filter")] = None,
        ptf: Annotated[Optional[StrictStr], Field(description="Backup job planType filter")] = None,
        stf: Annotated[Optional[StrictStr], Field(description="Backup job startTime filter")] = None,
        include: Annotated[Optional[StrictStr], Field(description="Which devices include (active|deleted|all) default value active")] = None,
        cursor: Annotated[Optional[StrictStr], Field(description="Cursor name")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=10000, strict=True, ge=1)]], Field(description="Limit number of records per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Backup jobs

        Returns list of backup jobs

        :param df: Device filter
        :type df: str
        :param ddf: Deleted device filter
        :type ddf: str
        :param sf: Backup job status filter
        :type sf: str
        :param ptf: Backup job planType filter
        :type ptf: str
        :param stf: Backup job startTime filter
        :type stf: str
        :param include: Which devices include (active|deleted|all) default value active
        :type include: str
        :param cursor: Cursor name
        :type cursor: str
        :param page_size: Limit number of records per page
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_backup_jobs_serialize(
            df=df,
            ddf=ddf,
            sf=sf,
            ptf=ptf,
            stf=stf,
            include=include,
            cursor=cursor,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetIntegrityCheckJobs200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_backup_jobs_serialize(
        self,
        df,
        ddf,
        sf,
        ptf,
        stf,
        include,
        cursor,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if df is not None:
            
            _query_params.append(('df', df))
            
        if ddf is not None:
            
            _query_params.append(('ddf', ddf))
            
        if sf is not None:
            
            _query_params.append(('sf', sf))
            
        if ptf is not None:
            
            _query_params.append(('ptf', ptf))
            
        if stf is not None:
            
            _query_params.append(('stf', stf))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        if cursor is not None:
            
            _query_params.append(('cursor', cursor))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'sessionKey', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/backup/jobs',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_integrity_check_jobs(
        self,
        df: Annotated[Optional[StrictStr], Field(description="Device filter.")] = None,
        ddf: Annotated[Optional[StrictStr], Field(description="Deleted device filter.")] = None,
        sf: Annotated[Optional[StrictStr], Field(description="Backup job status filter.")] = None,
        ptf: Annotated[Optional[StrictStr], Field(description="Backup job planType filter.")] = None,
        stf: Annotated[Optional[StrictStr], Field(description="Backup job startTime filter.")] = None,
        include: Annotated[Optional[StrictStr], Field(description="Which devices include (active|deleted|all) default value active.")] = None,
        cursor: Annotated[Optional[StrictStr], Field(description="Cursor name.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=10000, strict=True, ge=1)]], Field(description="Limit number of records per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetIntegrityCheckJobs200Response:
        """Integrity check jobs.

        Returns a list of integrity check jobs.

        :param df: Device filter.
        :type df: str
        :param ddf: Deleted device filter.
        :type ddf: str
        :param sf: Backup job status filter.
        :type sf: str
        :param ptf: Backup job planType filter.
        :type ptf: str
        :param stf: Backup job startTime filter.
        :type stf: str
        :param include: Which devices include (active|deleted|all) default value active.
        :type include: str
        :param cursor: Cursor name.
        :type cursor: str
        :param page_size: Limit number of records per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_integrity_check_jobs_serialize(
            df=df,
            ddf=ddf,
            sf=sf,
            ptf=ptf,
            stf=stf,
            include=include,
            cursor=cursor,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetIntegrityCheckJobs200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_integrity_check_jobs_with_http_info(
        self,
        df: Annotated[Optional[StrictStr], Field(description="Device filter.")] = None,
        ddf: Annotated[Optional[StrictStr], Field(description="Deleted device filter.")] = None,
        sf: Annotated[Optional[StrictStr], Field(description="Backup job status filter.")] = None,
        ptf: Annotated[Optional[StrictStr], Field(description="Backup job planType filter.")] = None,
        stf: Annotated[Optional[StrictStr], Field(description="Backup job startTime filter.")] = None,
        include: Annotated[Optional[StrictStr], Field(description="Which devices include (active|deleted|all) default value active.")] = None,
        cursor: Annotated[Optional[StrictStr], Field(description="Cursor name.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=10000, strict=True, ge=1)]], Field(description="Limit number of records per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetIntegrityCheckJobs200Response]:
        """Integrity check jobs.

        Returns a list of integrity check jobs.

        :param df: Device filter.
        :type df: str
        :param ddf: Deleted device filter.
        :type ddf: str
        :param sf: Backup job status filter.
        :type sf: str
        :param ptf: Backup job planType filter.
        :type ptf: str
        :param stf: Backup job startTime filter.
        :type stf: str
        :param include: Which devices include (active|deleted|all) default value active.
        :type include: str
        :param cursor: Cursor name.
        :type cursor: str
        :param page_size: Limit number of records per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_integrity_check_jobs_serialize(
            df=df,
            ddf=ddf,
            sf=sf,
            ptf=ptf,
            stf=stf,
            include=include,
            cursor=cursor,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetIntegrityCheckJobs200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_integrity_check_jobs_without_preload_content(
        self,
        df: Annotated[Optional[StrictStr], Field(description="Device filter.")] = None,
        ddf: Annotated[Optional[StrictStr], Field(description="Deleted device filter.")] = None,
        sf: Annotated[Optional[StrictStr], Field(description="Backup job status filter.")] = None,
        ptf: Annotated[Optional[StrictStr], Field(description="Backup job planType filter.")] = None,
        stf: Annotated[Optional[StrictStr], Field(description="Backup job startTime filter.")] = None,
        include: Annotated[Optional[StrictStr], Field(description="Which devices include (active|deleted|all) default value active.")] = None,
        cursor: Annotated[Optional[StrictStr], Field(description="Cursor name.")] = None,
        page_size: Annotated[Optional[Annotated[int, Field(le=10000, strict=True, ge=1)]], Field(description="Limit number of records per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Integrity check jobs.

        Returns a list of integrity check jobs.

        :param df: Device filter.
        :type df: str
        :param ddf: Deleted device filter.
        :type ddf: str
        :param sf: Backup job status filter.
        :type sf: str
        :param ptf: Backup job planType filter.
        :type ptf: str
        :param stf: Backup job startTime filter.
        :type stf: str
        :param include: Which devices include (active|deleted|all) default value active.
        :type include: str
        :param cursor: Cursor name.
        :type cursor: str
        :param page_size: Limit number of records per page.
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_integrity_check_jobs_serialize(
            df=df,
            ddf=ddf,
            sf=sf,
            ptf=ptf,
            stf=stf,
            include=include,
            cursor=cursor,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetIntegrityCheckJobs200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_integrity_check_jobs_serialize(
        self,
        df,
        ddf,
        sf,
        ptf,
        stf,
        include,
        cursor,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if df is not None:
            
            _query_params.append(('df', df))
            
        if ddf is not None:
            
            _query_params.append(('ddf', ddf))
            
        if sf is not None:
            
            _query_params.append(('sf', sf))
            
        if ptf is not None:
            
            _query_params.append(('ptf', ptf))
            
        if stf is not None:
            
            _query_params.append(('stf', stf))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        if cursor is not None:
            
            _query_params.append(('cursor', cursor))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'sessionKey', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/backup/integrity-check-jobs',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def submit_integrity_check_job(
        self,
        submit_integrity_check_job_request: Optional[SubmitIntegrityCheckJobRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SubmitIntegrityCheckJob200Response:
        """Create an integrity check job

        Creates an integrity check job

        :param submit_integrity_check_job_request:
        :type submit_integrity_check_job_request: SubmitIntegrityCheckJobRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._submit_integrity_check_job_serialize(
            submit_integrity_check_job_request=submit_integrity_check_job_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SubmitIntegrityCheckJob200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def submit_integrity_check_job_with_http_info(
        self,
        submit_integrity_check_job_request: Optional[SubmitIntegrityCheckJobRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SubmitIntegrityCheckJob200Response]:
        """Create an integrity check job

        Creates an integrity check job

        :param submit_integrity_check_job_request:
        :type submit_integrity_check_job_request: SubmitIntegrityCheckJobRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._submit_integrity_check_job_serialize(
            submit_integrity_check_job_request=submit_integrity_check_job_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SubmitIntegrityCheckJob200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def submit_integrity_check_job_without_preload_content(
        self,
        submit_integrity_check_job_request: Optional[SubmitIntegrityCheckJobRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create an integrity check job

        Creates an integrity check job

        :param submit_integrity_check_job_request:
        :type submit_integrity_check_job_request: SubmitIntegrityCheckJobRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._submit_integrity_check_job_serialize(
            submit_integrity_check_job_request=submit_integrity_check_job_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SubmitIntegrityCheckJob200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _submit_integrity_check_job_serialize(
        self,
        submit_integrity_check_job_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if submit_integrity_check_job_request is not None:
            _body_params = submit_integrity_check_job_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'sessionKey', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/backup/integrity-check-jobs',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


